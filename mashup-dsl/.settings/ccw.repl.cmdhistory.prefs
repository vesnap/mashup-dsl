cmdhistory=[";; Switching to mashup-dsl.datamodel namespace" "(run-server routes)" ";; Switching to mashup-dsl.templating namespace" "(get-events2 (z/xml-zip (xml/parse \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\")))" "(events-for-mashup)" "(vector (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) ))" "(into {} (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) ))" "(-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) )" "(into {} \#(vector (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) )))" "(into {} (vector (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) ))\\n      )" "(vector (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) ))" "(map \#(zipmap (map create-tag tags) %) (get-events (parse data-url) \:title \:start_time [\:performers \:performer \:name] \:stop_time))" "(events-for-mashup)" "(conj *map-for-mashups* \\"Events Mashup\\" (xx))" "(def ^\:dynamic *map-for-mashups* {\:title \:content})" "(conj *map-for-mashups* \\"Events Mashup\\" (xx))" "(conj {\:title \:content} \\"Events Mashup\\" (xx))" "(events-for-mashup)" "(into {} [\:title \\"Events Mashup\\",\:contents (xx)])" "(xx)" "(into {} (xx))" "(events-for-mashup2)" "(defn events-for-mashup2 []\\r\\n  (let [title \\"Events mashup\\" event-data (vector (create-map-of-events event-map ))]\\r\\n    (apply struct event-map title event-data)))" "(events-for-mashup2)" "(map \#(into {} (\:title %1 \:contents %2)) \\"events mashup\\" (xx))" "(map \#(into {} (\:title %1 \:contents %2)) [\\"events mashup\\" (xx)])" "(into [] (\\"jkf\\" \\"fnjkf\\"))" "(into [] '(\\"jkf\\" \\"fnjkf\\"))" "(map \#(into {} (\:title %1 \:contents %2)) '(\\"events mashup\\" (xx)))" "(map \#(into {} (\:title %1 \:contents %2)) '(\\"events mashup\\" {{\:1 \\"1\\" \:2 \\"2\\"} {\:3 \\"3\\" \:4 \\"4\\"}}))" "(map \#(into {} (\:title %1 \:contents %2)) '(\\"events mashup\\" [{\:1 \\"1\\" \:2 \\"2\\"} {\:3 \\"3\\" \:4 \\"4\\"}]))" "(map \#(into {} (\:title %1 \:contents %2)) \\"events mashup\\" [{\:1 \\"1\\" \:2 \\"2\\"} {\:3 \\"3\\" \:4 \\"4\\"}])" "(map \#(into {} (\:title first % \:contents second %)) '(\\"events mashup\\" {{\:1 \\"1\\" \:2 \\"2\\"} {\:3 \\"3\\" \:4 \\"4\\"}}))" "(vector (xx))" "(map {\:title \:content} {\\"Events mashup\\" (xx)})" "(map {} {\:title \:content} {\\"Events mashup\\" (xx)})" "(events-for-mashup)" "(defn events-for-mashup []\\r\\n  (let [title \\"Events mashup\\" \\r\\n        event-data (xx)]\\r\\n    (( (map {} {\:title \:content} {\\"Events mashup\\" (xx)})))))" "(events-for-mashup)" "(defn proba[] (map {} {\:title \:content} {\\"Events mashup\\" (xx)}))" "(proba)" "(map {} {%1 %2} {\\"Events mashup\\" (xx)})" "(map {} {% %} {\\"Events mashup\\" (xx)})" "(defmacro data-for-mashup [mashup-name func] `(map {} {\:title \:content} {~mashup-name ~@func}))" "(macroexpand-1 data-for-mashup \\"events\\" xx)" "(data-for-mashup \\"events\\" xx)" "(macroexpand-1 (data-for-mashup \\"events\\" xx))" "(map {} {\:title \:content} {\\"Events mashup\\" (xx)})" "(proba)" "(macroexpand-1 (data-for-mashup \\"events\\" xx))" "(macroexpand-1 '(data-for-mashup \\"events\\" xx))" "(macroexpand-1 `(data-for-mashup \\"events\\" xx))" "(macroexpand-1 '(data-for-mashup \\"events\\" (xx)))" "(macroexpand-1 '(data-for-mashup \\"events\\" xx))" "(macroexpand-1 '(data-for-mashup \\"events\\" (xx)))" "(data-for-mashup \\"events\\" (xx))" "(data-for-mashup \\"events\\" xx)" "(data-for-mashup \\"events\\" (xx))" "(macroexpand-1 '(data-for-mashup \\"events\\" (xx)))" "(macroexpand-1 `(data-for-mashup \\"events\\" (xx)))" "(data-for-mashup \\"events\\" (xx))" "(macroexpand-1 `(data-for-mashup \\"events\\" (xx)))" "(macroexpand-1 `(data-for-mashup \\"events\\" `(xx)))" "(macroexpand-1 `(data-for-mashup \\"events\\" ~@(xx)))" "(macroexpand-1 `(data-for-mashup \\"events\\" (xx)))" "(data-for-mashup \\"events\\" xx)" "(data-for-mashup \\"events\\" (xx))" "(data-for-mashup \\"events\\" xx)" "(defn data-for-mashup-stack [mashup-name val] (zipmap [\:title \:content] [mashup-name val]))" "(data-for-mashup-stack \\"events mashup\\" (xx))" "(data-for-mashup-stack \\"events mashup\\" (vec(xx)))" "(defn data-for-mashup-stack [mashup-name val] (zipmap [\:title \:content] [mashup-name (vec val)]))" "(data-for-mashup-stack \\"events mashup\\" (xx))" "(indeks table-template \\"events mashup\\" (data-for-mashup-stack \\"events mashup\\" (xx)))" "(indeks \\"events mashup\\" (data-for-mashup-stack \\"events mashup\\" (xx)))" ";; Switching to mashup-dsl.templating namespace" "(map [\:td] dummy-content)" "(def dummy-content\\r\\n {\:title \\"Events Mashup\\"\\r\\n   \:event-data [{ \:event-name \\"event name 1\\"\\r\\n                        \:performer \\"performer 1\\"\\r\\n                      \:date \\"date 1\\"\\r\\n                           \:start-time \\"start time 1\\"\\r\\n                           \:end-time \\"end time 1\\"}\\r\\n      {\:event-name \\"event name 2\\"\\r\\n                           \:performer \\"performer 2\\"\\r\\n                          \:date \\"date 2\\"\\r\\n                           \:start-time \\"start time 2\\"\\r\\n                           \:end-time \\"end time 2\\"}]})" "(map [\:td] (\:event-data dummy-content))" "(map [\:td] {\:event-name \\"event name 2\\"\\r\\n                           \:performer \\"performer 2\\"\\r\\n                          \:date \\"date 2\\"\\r\\n                           \:start-time \\"start time 2\\"\\r\\n                           \:end-time \\"end time 2\\"}\\n     )" "(map {\:td} {\:event-name \\"event name 2\\"\\r\\n                              \:performer \\"performer 2\\"\\r\\n                             \:date \\"date 2\\"\\r\\n                              \:start-time \\"start time 2\\"\\r\\n                              \:end-time \\"end time 2\\"})" "(\:event-data dummy-content)" "(html/defsnippet header-cell \\"index.html\\" [\:.psdg-top-cell] [value] [\:.psdg-top-cell](html/content value) )" "(html/defsnippet value-cell \\"index.html\\" [\:.psdg-right] [value] [\:.psdg-right] (html/content value))" "(html/deftemplate mshp \\"index.html\\" [content] \\n  [\:.psdg-top] (html/append (for [c (keys content)] (header-cell c)))\\n  [\:.psdg-right] (html/append (for [v (vals content)] (value-cell v))))" "(mshp (\:event-data dummy-content))" "(for [c (keys (first content))] (header-cell c))" "(html/deftemplate mshp \\"index.html\\" [content] \\r\\n     [\:.psdg-top] (for [c (keys (first content))] (header-cell c))\\r\\n     [\:.psdg-right] (html/append (for [v (vals content)] (value-cell v))))" "(mshp (\:event-data dummy-content))" "(html/deftemplate mshp \\"index.html\\" [content] \\r\\n        [\:.psdg-top] (for [c (keys (first content))] (header-cell c))\\r\\n        [\:.psdg-right] (html/append (for [v (vals (firsl content))] (value-cell v))))" "(html/deftemplate mshp \\"index.html\\" [content] \\r\\n           [\:.psdg-top] (for [c (keys (first content))] (header-cell c))\\r\\n           [\:.psdg-right] (html/append (for [v (vals (first content))] (value-cell v))))" "(mshp (\:event-data dummy-content))" "(apply str(mshp (\:event-data dummy-content)))" "(print (apply str (\:event-data dummy-content)))" "(print (apply str (mshp (\:event-data dummy-content))))" "(first(vals dummy-content))" "(first(vals (\:event-data dummy-content)))" "(\:event-data dummy-content)" "(vals (first (\:event-data dummy-content)))" "(doseq [v (vals \:event-data dummy-content)] (print v))" "(doseq [v (vals (\:event-data dummy-content))] (print v))" "(doseq [v (\:event-data dummy-content)] (print v))" "(doseq [v (\:event-data dummy-content)] (print (vals v)))" "(doseq [c content] ((for [v (vals c)]value-cell v)))" "(doseq [c content] (for [v (vals c)] (value-cell v)))" "(doseq [c (\:event-data dummy-content)] (for [v (vals c)] (value-cell v)))" "(print (apply str (mshp (\:event-data dummy-content))))" "(html/sniptest \\"index.html\\" [\:.psdg-top-cell] html/content (keys (first (\:event-data dummy-content))))" "(html/sniptest \\"<div class\=\\"psdg-top-cell\\">Website.com</div>\\" [\:.psdg-top-cell] html/content (keys (first (\:event-data dummy-content))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] html/content (keys (first (\:event-data dummy-content))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] html/content \\n               (name(keys (first (\:event-data dummy-content)))))" "(name(keys (first (\:event-data dummy-content))))" "(keys (first (\:event-data dummy-content)))" "(first (keys (first (\:event-data dummy-content))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] html/content \\r\\n                  (name first((keys (first (\:event-data dummy-content))))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] html/content \\r\\n                     (name (first(keys (first (\:event-data dummy-content))))))" "(name (first(keys (first (\:event-data dummy-content)))))" " (html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] (html/content \\r\\n                        (name (first(keys (first (\:event-data dummy-content)))))))" "(print (apply str (mshp (\:event-data dummy-content))))" "(html/deftemplate mshp \\"index.html\\" [content] \\r\\n              [\:.psdg-top] (html/append (for [c (keys (first content))] (html/clone-for [cols c](header-cell (name cols)))));ovde sigurno first ali ne radi \\r\\n              [\:.psdg-right] (html/append (doseq [c content] (html/clone-for [v (vals c)] (value-cell v)))))" "(print (apply str (mshp (\:event-data dummy-content))))" "(html/sniptest \\"index.html\\" [\:.psdg-top-cell] (html/content \\r\\n                           (name (first(keys (first (\:event-data dummy-content)))))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] (html/content \\r\\n                              (name (first(keys (first (\:event-data dummy-content)))))))" "(print (mshp (\:event-data dummy-content)))" ";; Switching to mashup-dsl.templating namespace" "(print (mshp (\:event-data dummy-content)))" "(print (mshp (\:content events-for-mashup)))" "(\:content events-for-mashup)" "(print (mshp (\:content (events-for-mashup))))" "(events-for-mashup)" "(xx)" "(events-for-mashup)" "(map {} {\:title \:content} {\\"Events mashup\\" (vec (xx))})" "(map {} {\:title \:content} {\\"Events mashup\\" (xx)})" ";; Switching to mashup-dsl.templating namespace" "(mshp (\:data-content(data-for-mashup-stack)))" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" "(print (mshp (\:data-content(data-for-mashup-stack \\"events mashup\\" (xx)))))" "(mshp (\:data-content(data-for-mashup-stack \\"events mashup\\" (xx))))" "'(use camel-clojure.dsl)" "(use camel-clojure.dsl)" "(use 'camel-clojure.dsl)" ";; Switching to mashup-dsl.aggregation namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'mashup-dsl.aggregation)))" ";; Switching to mashup-dsl.datamodel namespace" "(parsing \\"http\://api.search.yahoo.com/WebSearchService/rss/\\r\\nwebSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\")" "(parsing \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\")" "(get-content-from-tags \\"(parsing \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\")\\" chanel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" chanel)" "(get-content-from-tags \\"(parsing \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\")\\" \:chanel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:chanel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:rss \:chanel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:rss \:chanel \:link)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:rss)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:rss \:channel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:channel)" ";; Switching to mashup-dsl.aggregation namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'mashup-dsl.datamodel)))" ";; Switching to mashup-dsl.datamodel namespace" ";; Switching to mashup-dsl.aggregation namespace" "(aggregator-pattern)"]
eclipse.preferences.version=1
