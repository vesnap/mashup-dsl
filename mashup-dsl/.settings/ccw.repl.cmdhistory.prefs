cmdhistory=[";; Switching to mashup-dsl.datamodel namespace" "(run-server routes)" ";; Switching to mashup-dsl.templating namespace" "(get-events2 (z/xml-zip (xml/parse \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\")))" "(events-for-mashup)" "(vector (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) ))" "(into {} (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) ))" "(-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) )" "(into {} \#(vector (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) )))" "(into {} (vector (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) ))\\n      )" "(vector (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) ))" "(map \#(zipmap (map create-tag tags) %) (get-events (parse data-url) \:title \:start_time [\:performers \:performer \:name] \:stop_time))" "(events-for-mashup)" "(conj *map-for-mashups* \\"Events Mashup\\" (xx))" "(def ^\:dynamic *map-for-mashups* {\:title \:content})" "(conj *map-for-mashups* \\"Events Mashup\\" (xx))" "(conj {\:title \:content} \\"Events Mashup\\" (xx))" "(events-for-mashup)" "(into {} [\:title \\"Events Mashup\\",\:contents (xx)])" "(xx)" "(into {} (xx))" "(events-for-mashup2)" "(defn events-for-mashup2 []\\r\\n  (let [title \\"Events mashup\\" event-data (vector (create-map-of-events event-map ))]\\r\\n    (apply struct event-map title event-data)))" "(events-for-mashup2)" "(map \#(into {} (\:title %1 \:contents %2)) \\"events mashup\\" (xx))" "(map \#(into {} (\:title %1 \:contents %2)) [\\"events mashup\\" (xx)])" "(into [] (\\"jkf\\" \\"fnjkf\\"))" "(into [] '(\\"jkf\\" \\"fnjkf\\"))" "(map \#(into {} (\:title %1 \:contents %2)) '(\\"events mashup\\" (xx)))" "(map \#(into {} (\:title %1 \:contents %2)) '(\\"events mashup\\" {{\:1 \\"1\\" \:2 \\"2\\"} {\:3 \\"3\\" \:4 \\"4\\"}}))" "(map \#(into {} (\:title %1 \:contents %2)) '(\\"events mashup\\" [{\:1 \\"1\\" \:2 \\"2\\"} {\:3 \\"3\\" \:4 \\"4\\"}]))" "(map \#(into {} (\:title %1 \:contents %2)) \\"events mashup\\" [{\:1 \\"1\\" \:2 \\"2\\"} {\:3 \\"3\\" \:4 \\"4\\"}])" "(map \#(into {} (\:title first % \:contents second %)) '(\\"events mashup\\" {{\:1 \\"1\\" \:2 \\"2\\"} {\:3 \\"3\\" \:4 \\"4\\"}}))" "(vector (xx))" "(map {\:title \:content} {\\"Events mashup\\" (xx)})" "(map {} {\:title \:content} {\\"Events mashup\\" (xx)})" "(events-for-mashup)" "(defn events-for-mashup []\\r\\n  (let [title \\"Events mashup\\" \\r\\n        event-data (xx)]\\r\\n    (( (map {} {\:title \:content} {\\"Events mashup\\" (xx)})))))" "(events-for-mashup)" "(defn proba[] (map {} {\:title \:content} {\\"Events mashup\\" (xx)}))" "(proba)" "(map {} {%1 %2} {\\"Events mashup\\" (xx)})" "(map {} {% %} {\\"Events mashup\\" (xx)})" "(defmacro data-for-mashup [mashup-name func] `(map {} {\:title \:content} {~mashup-name ~@func}))" "(macroexpand-1 data-for-mashup \\"events\\" xx)" "(data-for-mashup \\"events\\" xx)" "(macroexpand-1 (data-for-mashup \\"events\\" xx))" "(map {} {\:title \:content} {\\"Events mashup\\" (xx)})" "(proba)" "(macroexpand-1 (data-for-mashup \\"events\\" xx))" "(macroexpand-1 '(data-for-mashup \\"events\\" xx))" "(macroexpand-1 `(data-for-mashup \\"events\\" xx))" "(macroexpand-1 '(data-for-mashup \\"events\\" (xx)))" "(macroexpand-1 '(data-for-mashup \\"events\\" xx))" "(macroexpand-1 '(data-for-mashup \\"events\\" (xx)))" "(data-for-mashup \\"events\\" (xx))" "(data-for-mashup \\"events\\" xx)" "(data-for-mashup \\"events\\" (xx))" "(macroexpand-1 '(data-for-mashup \\"events\\" (xx)))" "(macroexpand-1 `(data-for-mashup \\"events\\" (xx)))" "(data-for-mashup \\"events\\" (xx))" "(macroexpand-1 `(data-for-mashup \\"events\\" (xx)))" "(macroexpand-1 `(data-for-mashup \\"events\\" `(xx)))" "(macroexpand-1 `(data-for-mashup \\"events\\" ~@(xx)))" "(macroexpand-1 `(data-for-mashup \\"events\\" (xx)))" "(data-for-mashup \\"events\\" xx)" "(data-for-mashup \\"events\\" (xx))" "(data-for-mashup \\"events\\" xx)" "(defn data-for-mashup-stack [mashup-name val] (zipmap [\:title \:content] [mashup-name val]))" "(data-for-mashup-stack \\"events mashup\\" (xx))" "(data-for-mashup-stack \\"events mashup\\" (vec(xx)))" "(defn data-for-mashup-stack [mashup-name val] (zipmap [\:title \:content] [mashup-name (vec val)]))" "(data-for-mashup-stack \\"events mashup\\" (xx))" "(indeks table-template \\"events mashup\\" (data-for-mashup-stack \\"events mashup\\" (xx)))" "(indeks \\"events mashup\\" (data-for-mashup-stack \\"events mashup\\" (xx)))" ";; Switching to mashup-dsl.templating namespace" "(map [\:td] dummy-content)" "(def dummy-content\\r\\n {\:title \\"Events Mashup\\"\\r\\n   \:event-data [{ \:event-name \\"event name 1\\"\\r\\n                        \:performer \\"performer 1\\"\\r\\n                      \:date \\"date 1\\"\\r\\n                           \:start-time \\"start time 1\\"\\r\\n                           \:end-time \\"end time 1\\"}\\r\\n      {\:event-name \\"event name 2\\"\\r\\n                           \:performer \\"performer 2\\"\\r\\n                          \:date \\"date 2\\"\\r\\n                           \:start-time \\"start time 2\\"\\r\\n                           \:end-time \\"end time 2\\"}]})" "(map [\:td] (\:event-data dummy-content))" "(map [\:td] {\:event-name \\"event name 2\\"\\r\\n                           \:performer \\"performer 2\\"\\r\\n                          \:date \\"date 2\\"\\r\\n                           \:start-time \\"start time 2\\"\\r\\n                           \:end-time \\"end time 2\\"}\\n     )" "(map {\:td} {\:event-name \\"event name 2\\"\\r\\n                              \:performer \\"performer 2\\"\\r\\n                             \:date \\"date 2\\"\\r\\n                              \:start-time \\"start time 2\\"\\r\\n                              \:end-time \\"end time 2\\"})" "(\:event-data dummy-content)" "(html/defsnippet header-cell \\"index.html\\" [\:.psdg-top-cell] [value] [\:.psdg-top-cell](html/content value) )" "(html/defsnippet value-cell \\"index.html\\" [\:.psdg-right] [value] [\:.psdg-right] (html/content value))" "(html/deftemplate mshp \\"index.html\\" [content] \\n  [\:.psdg-top] (html/append (for [c (keys content)] (header-cell c)))\\n  [\:.psdg-right] (html/append (for [v (vals content)] (value-cell v))))" "(mshp (\:event-data dummy-content))" "(for [c (keys (first content))] (header-cell c))" "(html/deftemplate mshp \\"index.html\\" [content] \\r\\n     [\:.psdg-top] (for [c (keys (first content))] (header-cell c))\\r\\n     [\:.psdg-right] (html/append (for [v (vals content)] (value-cell v))))" "(mshp (\:event-data dummy-content))" "(html/deftemplate mshp \\"index.html\\" [content] \\r\\n        [\:.psdg-top] (for [c (keys (first content))] (header-cell c))\\r\\n        [\:.psdg-right] (html/append (for [v (vals (firsl content))] (value-cell v))))" "(html/deftemplate mshp \\"index.html\\" [content] \\r\\n           [\:.psdg-top] (for [c (keys (first content))] (header-cell c))\\r\\n           [\:.psdg-right] (html/append (for [v (vals (first content))] (value-cell v))))" "(mshp (\:event-data dummy-content))" "(apply str(mshp (\:event-data dummy-content)))" "(print (apply str (\:event-data dummy-content)))" "(print (apply str (mshp (\:event-data dummy-content))))" "(first(vals dummy-content))" "(first(vals (\:event-data dummy-content)))" "(\:event-data dummy-content)" "(vals (first (\:event-data dummy-content)))" "(doseq [v (vals \:event-data dummy-content)] (print v))" "(doseq [v (vals (\:event-data dummy-content))] (print v))" "(doseq [v (\:event-data dummy-content)] (print v))" "(doseq [v (\:event-data dummy-content)] (print (vals v)))" "(doseq [c content] ((for [v (vals c)]value-cell v)))" "(doseq [c content] (for [v (vals c)] (value-cell v)))" "(doseq [c (\:event-data dummy-content)] (for [v (vals c)] (value-cell v)))" "(print (apply str (mshp (\:event-data dummy-content))))" "(html/sniptest \\"index.html\\" [\:.psdg-top-cell] html/content (keys (first (\:event-data dummy-content))))" "(html/sniptest \\"<div class\=\\"psdg-top-cell\\">Website.com</div>\\" [\:.psdg-top-cell] html/content (keys (first (\:event-data dummy-content))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] html/content (keys (first (\:event-data dummy-content))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] html/content \\n               (name(keys (first (\:event-data dummy-content)))))" "(name(keys (first (\:event-data dummy-content))))" "(keys (first (\:event-data dummy-content)))" "(first (keys (first (\:event-data dummy-content))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] html/content \\r\\n                  (name first((keys (first (\:event-data dummy-content))))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] html/content \\r\\n                     (name (first(keys (first (\:event-data dummy-content))))))" "(name (first(keys (first (\:event-data dummy-content)))))" " (html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] (html/content \\r\\n                        (name (first(keys (first (\:event-data dummy-content)))))))" "(print (apply str (mshp (\:event-data dummy-content))))" "(html/deftemplate mshp \\"index.html\\" [content] \\r\\n              [\:.psdg-top] (html/append (for [c (keys (first content))] (html/clone-for [cols c](header-cell (name cols)))));ovde sigurno first ali ne radi \\r\\n              [\:.psdg-right] (html/append (doseq [c content] (html/clone-for [v (vals c)] (value-cell v)))))" "(print (apply str (mshp (\:event-data dummy-content))))" "(html/sniptest \\"index.html\\" [\:.psdg-top-cell] (html/content \\r\\n                           (name (first(keys (first (\:event-data dummy-content)))))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] (html/content \\r\\n                              (name (first(keys (first (\:event-data dummy-content)))))))" "(print (mshp (\:event-data dummy-content)))" ";; Switching to mashup-dsl.templating namespace" "(print (mshp (\:event-data dummy-content)))" "(print (mshp (\:content events-for-mashup)))" "(\:content events-for-mashup)" "(print (mshp (\:content (events-for-mashup))))" "(events-for-mashup)" "(xx)" "(events-for-mashup)" "(map {} {\:title \:content} {\\"Events mashup\\" (vec (xx))})" "(map {} {\:title \:content} {\\"Events mashup\\" (xx)})" ";; Switching to mashup-dsl.templating namespace" "(mshp (\:data-content(data-for-mashup-stack)))" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" "(print (mshp (\:data-content(data-for-mashup-stack \\"events mashup\\" (xx)))))" "(mshp (\:data-content(data-for-mashup-stack \\"events mashup\\" (xx))))" "'(use camel-clojure.dsl)" "(use camel-clojure.dsl)" "(use 'camel-clojure.dsl)" ";; Switching to mashup-dsl.aggregation namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'mashup-dsl.aggregation)))" ";; Switching to mashup-dsl.datamodel namespace" "(parsing \\"http\://api.search.yahoo.com/WebSearchService/rss/\\r\\nwebSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\")" "(parsing \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\")" "(get-content-from-tags \\"(parsing \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\")\\" chanel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" chanel)" "(get-content-from-tags \\"(parsing \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\")\\" \:chanel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:chanel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:rss \:chanel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:rss \:chanel \:link)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:rss)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:rss \:channel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:channel)" ";; Switching to mashup-dsl.aggregation namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'mashup-dsl.datamodel)))" ";; Switching to mashup-dsl.datamodel namespace" ";; Switching to mashup-dsl.aggregation namespace" "(aggregator-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" ";; Switching to mashup-dsl.aggregation namespace" "(aggregator-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" "(data2 data-url)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" "(let [start data-url\\r\\n\\tend   (mock \\"end\\")\\r\\n  enriching-with-data (enrich start (.getIn (.getBody data-url ))(data2 start) )\\r\\n\\tcamel (create (route (from start)\\r\\nenriching-with-data\\r\\n\\t\\t\\t     (to end)))]\\r\\n    (start-test camel start enriching-with-data end)\\r\\n    (stop-test camel))" "(ns mashup-dsl.content-enricher\\r\\n  (\:use [clojure.test]\\r\\n        [mashup-dsl.camel-dsl]\\r\\n        [clojure.set]\\r\\n\\r\\n    ;[net.cgrand.enlive-html \:as en-html]\\r\\n    [mashup-dsl.test-utils]\\r\\n    [mashup-dsl.datamodel]\\r\\n))" "(defn enrich[ex message url &key-data]\\r\\n;(message is map with starting data, data is list of attributes for data that we want to be added)\\r\\n((if not (nil? ex)\\r\\n(let [mess (.getIn (.getBody ex))]\\r\\nmerge-with union mess (data url))\\r\\n)))" "(deftest content-enricher-pattern\\r\\n  (let [start data-url\\r\\n\\tend   (mock \\"end\\")\\r\\n  enriching-with-data (enrich start (.getIn (.getBody data-url ))(data2 start) )\\r\\n\\tcamel (create (route (from start)\\r\\nenriching-with-data\\r\\n\\t\\t\\t     (to end)))]\\r\\n    (start-test camel start enriching-with-data end)\\r\\n    (stop-test camel)))" "(content-enricher-pattern)" "(-> data-url .getIn .getBody)" "(-> data-url Exchange.getIn Message.getBody)" "(data-url Exchange.getIn)" "(data-url Exchange.getIn.)" "(.. data-url getIn getBody)" "(aggregator-pattern)" ";; Switching to mashup-dsl.aggregation namespace" ";; Switching to mashup-dsl.test-utils namespace" "(aggregator-pattern)" "(deftest aggregator-pattern\\r\\n  (let [start (direct )\\r\\n\\tend  (mock \\"end\\")\\r\\n\\tf (fn [[body1 headers1] [body2 headers2]]\\r\\n\\t    (identity [(str body1 body2)\\r\\n\\t\\t       headers1]))\\r\\n\\r\\n\\tr (route (from start)\\r\\n\\t\\t (aggregator f \\"type\\" \:count 2)\\r\\n\\t\\t (to end))\\r\\n\\tcamel (create r)]\\r\\n    (start-test camel start end)\\r\\n    (send-text-message camel start \\"Java\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Clojure\\" \\"type\\" \\"t2\\")\\r\\n    (send-text-message camel start \\"Eclipse\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Emacs\\" \\"type\\" \\"t2\\")\\r\\n    \\r\\n    (let [messages (get-received-messages end)]\\r\\n      (is (\= (count messages) 2))\\r\\n      (is (\= (first messages) \\"JavaEclipse\\"))\\r\\n      (is (\= (second messages) \\"ClojureEmacs\\")))\\r\\n    (stop-test camel)))" "(aggregator-pattern)" ";; Switching to mashup-dsl.test-utils namespace" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" "(normalizer-pattern)" "(deftest normalizer-pattern\\r\\n  \\r\\n  (let [start data-url\\r\\n       end   (mock \\"end\\")\\t\\t\\t\\r\\n    xml-processing \\r\\n\\t\\t\\t\\t  (processor (map-tags-contents start \:events \:event \:description))\\r\\n\\t\\t\\t\\t  \\r\\n       routing (route (from start)\\r\\n               (router  (xml-processing))\\r\\n          (to end))\\r\\n\\r\\n\\tcamel (create (routing\\r\\n                 xml-processing))]\\r\\n    (start-test camel start end)\\r\\n \\r\\n    (is-message-count end 1)\\r\\n    (stop-test camel)))" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(normalizer-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(normalizer-pattern)" "(map-tags-contents data-url \:events \:event \:title)" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(normalizer-pattern)" "(aggregator-pattern)" "(deftest aggregator-pattern\\r\\n  (let [start (direct data-url)\\r\\n\\tend  (mock \\"end\\")\\r\\n\\tf (fn []\\r\\n\\t    (mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx)))))\\r\\n\\r\\n\\tr (route (from start)\\r\\n\\t\\t (aggregator f \\"type\\" \:count 2)\\r\\n\\t\\t (to end))\\r\\n\\tcamel (create r)]\\r\\n    (start-test camel start end)\\r\\n    (send-text-message camel start \\"Java\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Clojure\\" \\"type\\" \\"t2\\")\\r\\n    (send-text-message camel start \\"Eclipse\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Emacs\\" \\"type\\" \\"t2\\")\\r\\n    \\r\\n    (let [messages (get-received-messages end)]\\r\\n      (is (\= (count messages) 2))\\r\\n      (is (\= (first messages) \\"JavaEclipse\\"))\\r\\n      (is (\= (second messages) \\"ClojureEmacs\\")))\\r\\n    (stop-test camel)))" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" "(html/deftemplate mshp tmpl-html [content]\\r\\n      [\:\#psdg-top] (html/append (for [c (keys (first content))] (header-cell (name c))))\\r\\n      [\:.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))" "(ns mashup-dsl.templating \\r\\n  (\:use [net.cgrand.enlive-html \:as html] \\r\\n        [net.cgrand.moustache ]\\r\\n        [mashup-dsl.utils]\\r\\n        [mashup-dsl.datamodel \:as dm]\\r\\n  [clojure.pprint]))" "(html/deftemplate mshp tmpl-html [content]\\r\\n      [\:\#psdg-top] (html/append (for [c (keys (first content))] (header-cell (name c))))\\r\\n      [\:.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" "(aggregator-pattern)" "(deftest aggregator-pattern\\r\\n  (let [start (direct data-url)\\r\\n\\tend  (mock \\"end\\")\\r\\n\\tf (fn []\\r\\n\\t    (mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx)))))\\r\\n\\r\\n\\tr (route (from start)\\r\\n\\t\\t (aggregator f \\"type\\" \:count 2)\\r\\n\\t\\t (to end))\\r\\n\\tcamel (create r)]\\r\\n    (start-test camel start end)\\r\\n    (send-text-message camel start \\"Java\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Clojure\\" \\"type\\" \\"t2\\")\\r\\n    (send-text-message camel start \\"Eclipse\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Emacs\\" \\"type\\" \\"t2\\")\\r\\n    \\r\\n    (let [messages (get-received-messages end)]\\r\\n      (is (\= (count messages) 2))\\r\\n      (is (\= (first messages) \\"JavaEclipse\\"))\\r\\n      (is (\= (second messages) \\"ClojureEmacs\\")))\\r\\n    (stop-test camel)))" "(ns mashup-dsl.aggregation\\r\\n  (\:use [clojure.test]\\r\\n        [mashup-dsl.templating]\\r\\n        [mashup-dsl.camel-dsl]\\r\\n        [mashup-dsl.datamodel]\\r\\n     \\r\\n\\t[mashup-dsl.test-utils]\\r\\n ))" "(deftest aggregator-pattern\\r\\n  (let [start (direct data-url)\\r\\n\\tend  (mock \\"end\\")\\r\\n\\tf (fn []\\r\\n\\t    (mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx)))))\\r\\n\\r\\n\\tr (route (from start)\\r\\n\\t\\t (aggregator f \\"type\\" \:count 2)\\r\\n\\t\\t (to end))\\r\\n\\tcamel (create r)]\\r\\n    (start-test camel start end)\\r\\n    (send-text-message camel start \\"Java\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Clojure\\" \\"type\\" \\"t2\\")\\r\\n    (send-text-message camel start \\"Eclipse\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Emacs\\" \\"type\\" \\"t2\\")\\r\\n    \\r\\n    (let [messages (get-received-messages end)]\\r\\n      (is (\= (count messages) 2))\\r\\n      (is (\= (first messages) \\"JavaEclipse\\"))\\r\\n      (is (\= (second messages) \\"ClojureEmacs\\")))\\r\\n    (stop-test camel)))" "(aggregator-pattern)" ";; Switching to mashup-dsl.datamodel namespace" "(get-content-from-tags data-url \:events \:event \:title)" "(map-tags-contents data-url \:events \:event \:title)" "(testing2)" "(def v1 [{\:name \\"name1\\" \:address \\"address1\\"} {\:name \\"name2\\" \:address \\"address2\\"}])" "(def v2 [{\:title \\"name1\\" \:dateOfBirth \\"1-1-1971\\"} {\:title \\"name3\\" \:dateOfBirth \\"1-1-1971\\"}])" "(dm-join v1 v2 \:name \:title)" "(clojure.set/join v1 v2 {\:name \:title})" "(seq \:name \:title)" "(seq (\:name \:title))" "(seq  [\:name \:title])" "(seq  {\:name \:title})" "(mapv key [\:name \:title])" "(mapv key ([\:name \:title]))" "(defn left-join [key-map xs ys]\\r\\n  (let [kes (seq key-map)\\r\\n        lks (mapv key kes)\\r\\n        rks (mapv val kes)\\r\\n        gxs (group-by \#(mapv (fn [k] (get % k)) lks) xs)\\r\\n        gys (dissoc (group-by \#(mapv (fn [v] (get % v)) rks) ys) nil)\\r\\n        kvs (keys gxs)]\\r\\n    (persistent\!\\r\\n     (reduce (fn [out kv]\\r\\n               (let [l (get gxs kv)\\r\\n                     r (get gys kv)]\\r\\n                 (if (seq r)\\r\\n                   (reduce (fn [out m1]\\r\\n                             (reduce (fn [out m2]\\r\\n                                       (conj\! out (merge m1 m2)))\\r\\n                                     out\\r\\n                                     r))\\r\\n                           out\\r\\n                           l)\\r\\n                   (reduce conj\! out l))))\\r\\n             (transient [])\\r\\n             kvs))))" "(left-join {\:name \:title} v1 v2)" "(val [\:name \:title])" "(mapv key [\:name \:title])" "(mapv key (seq  {\:name \:title}))" "(mapv val (seq  {\:name \:title}))" "(group-by \#(mapv (fn [k] (get % k)) (mapv key (seq  {\:name \:title}))) v1)" "(dissoc (group-by \#(mapv (fn [v] (get % v)) (mapv val (seq  {\:name \:title}))) v2) nil)" "(keys (group-by \#(mapv (fn [k] (get % k)) (mapv key (seq  {\:name \:title}))) v1))" "(get {\:name \\"something\\"} \:name)" "\\r\\n(defn filter [k1 k2]\\r\\n  (fn [d1 d2]\\r\\n    (for [m1 d1\\r\\n          m2 d2 \\r\\n      \:let [n1 (k1 m1)\\r\\n            t1 (k2 m2)]\\r\\n      \:when (\= n1 t1) ]\\r\\n    (merge m1 (dissoc m2 k2)))))\\r\\n\\r\\n\\r\\n(defn data-join [k1]\\r\\n  (fn [d1 d2]\\r\\n    (reduce (fn [acc t] \\r\\n          (map (fn [v1 v2] \\r\\n                (if (\= (k1 v1)\\r\\n                       (k1 v2))\\r\\n                  v1 v2)) (repeat t) acc))\\r\\n        d1 d2)))" " (->> v2 \\r\\n       ((mashup-dsl.datamodel/filter \:name \:title) v1  )\\r\\n       ((data-join \:name) v1))" "((mashup-dsl.datamodel/filter \:name \:title) v1  )" "(def feed1 (get-content-from-tags data-url \:events \:event \:title))" "(def feed2 (get-content-from-tags \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=Cher&api_key\=b25b959554ed76058ac220b7b2e0a026\\" \:artist))" "(def feed2 (get-content-from-tags \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=Cher&api_key\=b75950afc5678fba4e962def9105c1ee\\" \:artist))" "(left-join {\:title \:name} feed1 feed2)" "(left-join {\:title \:name} (feed1) (feed2))" "(feed1)" "feed1" "feed2" "(def lastfmurl \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=Cher&api_key\=b25b959554ed76058ac220b7b2e0a026\\")" "(map-tags-contents lastfmurl \:name)" "(map-tags-contents lastfmurl \:content)" "(map-tags-contents lastfmurl content)" "(feed1)" "(map-tags-contents data-url \:events \:event \:title)" "(map-tags-contents data-url \:events \:event)" ";; Switching to mashup-dsl.datamodel namespace" "(def data (en-html/xml-resource \\"your.xml\\"))\\r\\n(en-html/select data [\:events])" "(def datafromurl (en-html/xml-resource data-url))" "(letfn [(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:tag %)) coll))))]\\r\\n  (map \#(list (get-tag \:c %) (get-tag \:e (get-tag \:d %)))\\r\\n       (map \:content (\:content (clojure.xml/parse \\"foo.xml\\")))))" "(letfn [(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:tag %)) coll))))]\\r\\n  (map \#(list (get-tag \:c %) (get-tag \:e (get-tag \:d %)))\\r\\n       (map \:content (\:content (clojure.xml/parse data-url)))))" "(letfn [(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:event %)) coll))))]\\r\\n     (map \#(list (get-tag \:c %) (get-tag \:e (get-tag \:d %)))\\r\\n          (map \:content (\:content (clojure.xml/parse data-url)))))" "(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:event %)) coll))))" "(defn get-tag [tag coll] (\:content (first (filter \#(\= tag (\:event %)) coll))))" "(map \#(list (get-tag \:events %) (get-tag \:event (get-tag \:title %)))\\r\\n             (map \:content (\:content (clojure.xml/parse data-url))))" "(f)" "(\:content (clojure.xml/parse data-url))" "(\:content (\:content (clojure.xml/parse data-url)))" "(f)" "(\:total_items (\:content (clojure.xml/parse data-url)))" ";; Switching to mashup-dsl.datamodel namespace" "(f)" "(testing2)" "(f)" "(parsing data-url)" "(zipp (parse data-url))" "(get-content-from-tags data-url \:events \:event \:title)" "(map-tags-contents data-url \:events \:event \:title)" "(data data-url)" ";; Switching to mashup-dsl.datamodel namespace" "(f)" ";; Switching to mashup-dsl.datamodel namespace" "(f)" "(\:content (parsing data-url))" "(get-tag \:events (parsing data-url))" "(\:content (first (filter \#(\= \:events (\:tag %)) (parsing data-url))))" "(filter \#(\= \:events (\:tag %)) (\:content (parsing data-url)))" "(get-tag \:event data-url)" ";; Switching to mashup-dsl.datamodel namespace" "(parsing data-url)" "(get-tag \:events data-url)" "(\:content (first (filter \#(\= \:title (\:tag %)) (\:content (get-tag \:events data-url)))))" "(f)" "(get-contents data-url \:events \:event \:title)" "(get-contents data-url [\:events \:event \:title])" "(-> (parsing data-url) \:events \:event \:title)" "(map-tags-contents data-url \:events \:event \:title)" "(get-content-from-tags data-url \:events \:event \:title)" "(f)" "(get-tag \:title data-url)" "(zipp (parsing data-url))" "(get-events (zipp data-url))" "(zipp data-url)" "(zipp (parsing data-url))" "(get-events (zipp(parsing data-url)))" ";; Switching to mashup-dsl.datamodel namespace" "(def *some-xml*\\r\\n     \\"<?xml version\=\\\\\\"1.0\\\\\\" encoding\=\\\\\\"UTF-8\\\\\\"?>\\r\\n<books>\\r\\n  <book title\=\\\\\\"Some Guide To XML\\\\\\">\\r\\n    <author>\\r\\n      <name>P.T. Xarnum</name>\\r\\n      <email>pt@x.m.l</email>\\r\\n    </author>\\r\\n    <description>\\r\\n      Simply the most comprehensive XML Book on the market today.\\r\\n    </description>\\r\\n  </book>\\r\\n  <book title\=\\\\\\"Some Guide To Functional Programming\\\\\\">\\r\\n    <author>\\r\\n      <name>S. Hawking</name>\\r\\n      <email>universe@cambridge.ed.u</email>\\r\\n    </author>\\r\\n    <description>\\r\\n      This book is too smart for you, try 'Head first Quantum Mechanics for Dummies' instead.\\r\\n    </description>\\r\\n  </book>\\r\\n</books>\\")" "(prn ($x\:tag \\"/*\\" *some-xml*))" "(prn (map \#(-> % \:attrs \:title) ($x \\"//book\\" *some-xml*)))" "(prn ($x\:attrs* \\"//book\\" *some-xml* \:title))" "(prn ($x\:text \\"./author/name\\"\\r\\n              ($x\:node \\"//book[contains(@title,'XML')]\\" *some-xml*)))" "(prn ($x\:attrs* \\"/search/events/event/title\\" data-url ))" "(prn ($x\:tag \\"/*\\" data-url))" "(prn ($x\:tag \\"/*\\" (parsing data-url)))" ";; Switching to mashup-dsl.datamodel namespace" "(get-tags)" "(defn get-tags [] (clj-xp/$x\:text \\"/events/event/title\\" (xmldoc)))" "(get-tags)" "($x\:text \\"/events/event/title\\" (xmldoc))" "(def xmldoc\\r\\n     (memoize (fn [] (xml->doc (events-xml)))))" "(xml-> doc (events-xml))" "(xml -> doc (events-xml))" "(xml->doc (events-xml))" ";; Switching to mashup-dsl.datamodel namespace" "(xml->doc (events-xml))" "(slurp data-url)" "($x\:text \\"/events/event/title\\" (xmldoc))" "($x\:text \\"search/events/event/title\\" (xmldoc))" "(all-tags (xmldoc))" "\\n               (visit-nodes []\\r\\n               ($x \\"./*\\" (xmldoc))\\r\\n               (fn [p n]\\r\\n                 (printf \\"%s tag\:%s\\\\n\\"\\r\\n                         (apply str (interpose \\"/\\" (map name p)))\\r\\n                         (name (\:tag n)))))" "\\r\\n(comment (visit-nodes []\\r\\n               ($x \\"./*\\" (xmldoc))\\r\\n               (fn [p n]\\r\\n                 (printf \\"%s tag\:%s\\\\n\\"\\r\\n                         (apply str (interpose \\"/\\" (map name p)))\\r\\n                         (name (\:tag n))))))" "(visit-nodes []\\r\\n               ($x \\"./*\\" (xmldoc))\\r\\n               (fn [p n]\\r\\n                 (printf \\"%s tag\:%s\\\\n\\"\\r\\n                         (apply str (interpose \\"/\\" (map name p)))\\r\\n                         (name (\:tag n)))))" "(all-paths (xmldoc))" "(doseq [p (all-paths (xmldoc))]\\r\\n    (println p))" "(pp/pprint\\r\\n   (map\\r\\n    (fn [item]\\r\\n      {\:title ($x\:text \\"./title\\" item)\\r\\n       \:url  ($x\:text \\"./url\\" item)})\\r\\n    (take 5\\r\\n          ($x \\"/search/events/event\\" (xmldoc)))))" "(pp/pprint\\r\\n      (map\\r\\n       (fn [item]\\r\\n         {\:title ($x\:text \\"./title\\" item)\\r\\n          \:url  ($x\:text \\"./url\\" item)})\\r\\n       (take 5\\r\\n             ($x \\"/search/events/event\\" (xmldoc)))))" "(map\\r\\n          (fn [item]\\r\\n            {\:title ($x\:text \\"./title\\" item)\\r\\n             \:url  ($x\:text \\"./url\\" item)})\\r\\n          (take 5\\r\\n                ($x \\"/search/events/event\\" (xmldoc))))" ";; Switching to mashup-dsl.datamodel namespace" "(defn create-xpath [tag] (keyword tag))" "(defn create-xpath [tag] (str \\"./\\" tag))" "(map (create-tag %) \\"first\\" \\"second\\")" "(apply create-tag [\\"first\\" \\"second\\"])" "(def tags [\\"first\\" \\"second\\"])" "(doseq [tag tags] (create-tag tag))" "(fn [item](doseq [tag tags])(into {} (create-tag tag) ($\:text (create-xpath tag) item)) (take 5 ($x \\"/search/events/event\\" (xmldoc))))" "(fn [item](doseq [tag tags])(into {} (create-tag tag) ($x\:text (create-xpath tag) item)) (take 5 ($x \\"/search/events/event\\" (xmldoc))))" "(defn parse [item]\\n  (doseq [tag tags])(into {} (create-tag tag) ($x\:text (create-xpath tag) item)) )" "(def item (take 5 ($x \\"/search/events/event\\" (xmldoc))))" "(parse item)" "(create-xpath \\"url\\")" "(create-tag \\"url\\")" "(keyword \\"url\\")" "(defn parse [item]\\r\\n     (doseq [tag tags])(into {} (keyword tag) ($x\:text (create-xpath tag) item)) )" "(parse item)" "(doseq [tag tags])(into {} (keyword tag) ($x\:text (create-xpath tag) item))" "(doseq [tag tags])(conj {} (keyword tag) ($x\:text (create-xpath tag) item))" "(parse item)" "(doseq [tag tags](into {} ((keyword tag) ($x\:text (create-xpath tag) item))) )" "(defn tag-fn [tag] (partial $x\:text tag))" "(map (tag-fn \\"title\\") (take 5 ($x \\"//event\\" (xmldoc))))" "(map (juxt (tag-fn \\"url\\") (tag-fn \\"title\\")) (take 2 ($x \\"//event\\" (xmldoc))))" "(get-content-from-tags data-url \:events \:event \:title)" "(zipmap [\:title \:url] (map (juxt (tag-fn \\"url\\") (tag-fn \\"title\\")) (take 2 ($x \\"//event\\" (xmldoc)))))" "(def ks [\:title \:url])" "(map \#(zipmap ks %) (map (juxt (tag-fn \\"url\\") (tag-fn \\"title\\")) (take 2 ($x \\"//event\\" (xmldoc)))))" "(def ks [\:url \:title])" "(map \#(zipmap ks %) (map (juxt (tag-fn \\"url\\") (tag-fn \\"title\\")) (take 2 ($x \\"//event\\" (xmldoc)))))" "(def item1 ({\:title \\"title 1\\", \:url \\"url1\\"} {\:title \\"title 1\\", \:url \\"url1\\"}))" "(def item2 ({\:name \\"title 1\\", \:something \\"sss\\"} {\:name \\"title 2\\", \:something \\"ssss2222\\"}))" "(def item1 ({\:title \\"title 1\\", \:url \\"url1\\"} {\:title \\"title 2\\", \:url \\"url2\\"}))" "(clojure.set/join item1 item2 {\:title \:name})" "(clojure.set/join item1 item2 {\:name \:title})" "(def item1 [{\:title \\"title 1\\", \:url \\"url1\\"} {\:title \\"title 2\\", \:url \\"url2\\"}])" "(def item2 [{\:name \\"title 1\\", \:something \\"sss\\"} {\:name \\"title 2\\", \:something \\"ssss2222\\"}])" "(clojure.set/join item1 item2 {\:name \:title})" "(vec '(1 2 3))" "(vec item1)" "(def item1 ({\:title \\"title 1\\", \:url \\"url1\\"} {\:title \\"title 2\\", \:url \\"url2\\"}))" "(vec item1)" "(apply vec item1)" "(def item1 '({\:title \\"title 1\\", \:url \\"url1\\"} {\:title \\"title 2\\", \:url \\"url2\\"}))" "(vec item1)" " (def item2 '({\:name \\"title 1\\", \:something \\"sss\\"} {\:name \\"title 2\\", \:something \\"ssss2222\\"}))" "(clojure.set/join (vec item1) (vec item2) {\:name \:title})" "(vec '\#{\:something \\"sss\\" \:name \\"name1\\"})"]
eclipse.preferences.version=1
