cmdhistory=[";; Switching to mashup-dsl.datamodel namespace" "(run-server routes)" ";; Switching to mashup-dsl.templating namespace" "(get-events2 (z/xml-zip (xml/parse \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\")))" "(events-for-mashup)" "(vector (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) ))" "(into {} (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) ))" "(-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) )" "(into {} \#(vector (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) )))" "(into {} (vector (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) ))\\n      )" "(vector (-> data-url parse (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time) ))" "(map \#(zipmap (map create-tag tags) %) (get-events (parse data-url) \:title \:start_time [\:performers \:performer \:name] \:stop_time))" "(events-for-mashup)" "(conj *map-for-mashups* \\"Events Mashup\\" (xx))" "(def ^\:dynamic *map-for-mashups* {\:title \:content})" "(conj *map-for-mashups* \\"Events Mashup\\" (xx))" "(conj {\:title \:content} \\"Events Mashup\\" (xx))" "(events-for-mashup)" "(into {} [\:title \\"Events Mashup\\",\:contents (xx)])" "(xx)" "(into {} (xx))" "(events-for-mashup2)" "(defn events-for-mashup2 []\\r\\n  (let [title \\"Events mashup\\" event-data (vector (create-map-of-events event-map ))]\\r\\n    (apply struct event-map title event-data)))" "(events-for-mashup2)" "(map \#(into {} (\:title %1 \:contents %2)) \\"events mashup\\" (xx))" "(map \#(into {} (\:title %1 \:contents %2)) [\\"events mashup\\" (xx)])" "(into [] (\\"jkf\\" \\"fnjkf\\"))" "(into [] '(\\"jkf\\" \\"fnjkf\\"))" "(map \#(into {} (\:title %1 \:contents %2)) '(\\"events mashup\\" (xx)))" "(map \#(into {} (\:title %1 \:contents %2)) '(\\"events mashup\\" {{\:1 \\"1\\" \:2 \\"2\\"} {\:3 \\"3\\" \:4 \\"4\\"}}))" "(map \#(into {} (\:title %1 \:contents %2)) '(\\"events mashup\\" [{\:1 \\"1\\" \:2 \\"2\\"} {\:3 \\"3\\" \:4 \\"4\\"}]))" "(map \#(into {} (\:title %1 \:contents %2)) \\"events mashup\\" [{\:1 \\"1\\" \:2 \\"2\\"} {\:3 \\"3\\" \:4 \\"4\\"}])" "(map \#(into {} (\:title first % \:contents second %)) '(\\"events mashup\\" {{\:1 \\"1\\" \:2 \\"2\\"} {\:3 \\"3\\" \:4 \\"4\\"}}))" "(vector (xx))" "(map {\:title \:content} {\\"Events mashup\\" (xx)})" "(map {} {\:title \:content} {\\"Events mashup\\" (xx)})" "(events-for-mashup)" "(defn events-for-mashup []\\r\\n  (let [title \\"Events mashup\\" \\r\\n        event-data (xx)]\\r\\n    (( (map {} {\:title \:content} {\\"Events mashup\\" (xx)})))))" "(events-for-mashup)" "(defn proba[] (map {} {\:title \:content} {\\"Events mashup\\" (xx)}))" "(proba)" "(map {} {%1 %2} {\\"Events mashup\\" (xx)})" "(map {} {% %} {\\"Events mashup\\" (xx)})" "(defmacro data-for-mashup [mashup-name func] `(map {} {\:title \:content} {~mashup-name ~@func}))" "(macroexpand-1 data-for-mashup \\"events\\" xx)" "(data-for-mashup \\"events\\" xx)" "(macroexpand-1 (data-for-mashup \\"events\\" xx))" "(map {} {\:title \:content} {\\"Events mashup\\" (xx)})" "(proba)" "(macroexpand-1 (data-for-mashup \\"events\\" xx))" "(macroexpand-1 '(data-for-mashup \\"events\\" xx))" "(macroexpand-1 `(data-for-mashup \\"events\\" xx))" "(macroexpand-1 '(data-for-mashup \\"events\\" (xx)))" "(macroexpand-1 '(data-for-mashup \\"events\\" xx))" "(macroexpand-1 '(data-for-mashup \\"events\\" (xx)))" "(data-for-mashup \\"events\\" (xx))" "(data-for-mashup \\"events\\" xx)" "(data-for-mashup \\"events\\" (xx))" "(macroexpand-1 '(data-for-mashup \\"events\\" (xx)))" "(macroexpand-1 `(data-for-mashup \\"events\\" (xx)))" "(data-for-mashup \\"events\\" (xx))" "(macroexpand-1 `(data-for-mashup \\"events\\" (xx)))" "(macroexpand-1 `(data-for-mashup \\"events\\" `(xx)))" "(macroexpand-1 `(data-for-mashup \\"events\\" ~@(xx)))" "(macroexpand-1 `(data-for-mashup \\"events\\" (xx)))" "(data-for-mashup \\"events\\" xx)" "(data-for-mashup \\"events\\" (xx))" "(data-for-mashup \\"events\\" xx)" "(defn data-for-mashup-stack [mashup-name val] (zipmap [\:title \:content] [mashup-name val]))" "(data-for-mashup-stack \\"events mashup\\" (xx))" "(data-for-mashup-stack \\"events mashup\\" (vec(xx)))" "(defn data-for-mashup-stack [mashup-name val] (zipmap [\:title \:content] [mashup-name (vec val)]))" "(data-for-mashup-stack \\"events mashup\\" (xx))" "(indeks table-template \\"events mashup\\" (data-for-mashup-stack \\"events mashup\\" (xx)))" "(indeks \\"events mashup\\" (data-for-mashup-stack \\"events mashup\\" (xx)))" ";; Switching to mashup-dsl.templating namespace" "(map [\:td] dummy-content)" "(def dummy-content\\r\\n {\:title \\"Events Mashup\\"\\r\\n   \:event-data [{ \:event-name \\"event name 1\\"\\r\\n                        \:performer \\"performer 1\\"\\r\\n                      \:date \\"date 1\\"\\r\\n                           \:start-time \\"start time 1\\"\\r\\n                           \:end-time \\"end time 1\\"}\\r\\n      {\:event-name \\"event name 2\\"\\r\\n                           \:performer \\"performer 2\\"\\r\\n                          \:date \\"date 2\\"\\r\\n                           \:start-time \\"start time 2\\"\\r\\n                           \:end-time \\"end time 2\\"}]})" "(map [\:td] (\:event-data dummy-content))" "(map [\:td] {\:event-name \\"event name 2\\"\\r\\n                           \:performer \\"performer 2\\"\\r\\n                          \:date \\"date 2\\"\\r\\n                           \:start-time \\"start time 2\\"\\r\\n                           \:end-time \\"end time 2\\"}\\n     )" "(map {\:td} {\:event-name \\"event name 2\\"\\r\\n                              \:performer \\"performer 2\\"\\r\\n                             \:date \\"date 2\\"\\r\\n                              \:start-time \\"start time 2\\"\\r\\n                              \:end-time \\"end time 2\\"})" "(\:event-data dummy-content)" "(html/defsnippet header-cell \\"index.html\\" [\:.psdg-top-cell] [value] [\:.psdg-top-cell](html/content value) )" "(html/defsnippet value-cell \\"index.html\\" [\:.psdg-right] [value] [\:.psdg-right] (html/content value))" "(html/deftemplate mshp \\"index.html\\" [content] \\n  [\:.psdg-top] (html/append (for [c (keys content)] (header-cell c)))\\n  [\:.psdg-right] (html/append (for [v (vals content)] (value-cell v))))" "(mshp (\:event-data dummy-content))" "(for [c (keys (first content))] (header-cell c))" "(html/deftemplate mshp \\"index.html\\" [content] \\r\\n     [\:.psdg-top] (for [c (keys (first content))] (header-cell c))\\r\\n     [\:.psdg-right] (html/append (for [v (vals content)] (value-cell v))))" "(mshp (\:event-data dummy-content))" "(html/deftemplate mshp \\"index.html\\" [content] \\r\\n        [\:.psdg-top] (for [c (keys (first content))] (header-cell c))\\r\\n        [\:.psdg-right] (html/append (for [v (vals (firsl content))] (value-cell v))))" "(html/deftemplate mshp \\"index.html\\" [content] \\r\\n           [\:.psdg-top] (for [c (keys (first content))] (header-cell c))\\r\\n           [\:.psdg-right] (html/append (for [v (vals (first content))] (value-cell v))))" "(mshp (\:event-data dummy-content))" "(apply str(mshp (\:event-data dummy-content)))" "(print (apply str (\:event-data dummy-content)))" "(print (apply str (mshp (\:event-data dummy-content))))" "(first(vals dummy-content))" "(first(vals (\:event-data dummy-content)))" "(\:event-data dummy-content)" "(vals (first (\:event-data dummy-content)))" "(doseq [v (vals \:event-data dummy-content)] (print v))" "(doseq [v (vals (\:event-data dummy-content))] (print v))" "(doseq [v (\:event-data dummy-content)] (print v))" "(doseq [v (\:event-data dummy-content)] (print (vals v)))" "(doseq [c content] ((for [v (vals c)]value-cell v)))" "(doseq [c content] (for [v (vals c)] (value-cell v)))" "(doseq [c (\:event-data dummy-content)] (for [v (vals c)] (value-cell v)))" "(print (apply str (mshp (\:event-data dummy-content))))" "(html/sniptest \\"index.html\\" [\:.psdg-top-cell] html/content (keys (first (\:event-data dummy-content))))" "(html/sniptest \\"<div class\=\\"psdg-top-cell\\">Website.com</div>\\" [\:.psdg-top-cell] html/content (keys (first (\:event-data dummy-content))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] html/content (keys (first (\:event-data dummy-content))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] html/content \\n               (name(keys (first (\:event-data dummy-content)))))" "(name(keys (first (\:event-data dummy-content))))" "(keys (first (\:event-data dummy-content)))" "(first (keys (first (\:event-data dummy-content))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] html/content \\r\\n                  (name first((keys (first (\:event-data dummy-content))))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] html/content \\r\\n                     (name (first(keys (first (\:event-data dummy-content))))))" "(name (first(keys (first (\:event-data dummy-content)))))" " (html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] (html/content \\r\\n                        (name (first(keys (first (\:event-data dummy-content)))))))" "(print (apply str (mshp (\:event-data dummy-content))))" "(html/deftemplate mshp \\"index.html\\" [content] \\r\\n              [\:.psdg-top] (html/append (for [c (keys (first content))] (html/clone-for [cols c](header-cell (name cols)))));ovde sigurno first ali ne radi \\r\\n              [\:.psdg-right] (html/append (doseq [c content] (html/clone-for [v (vals c)] (value-cell v)))))" "(print (apply str (mshp (\:event-data dummy-content))))" "(html/sniptest \\"index.html\\" [\:.psdg-top-cell] (html/content \\r\\n                           (name (first(keys (first (\:event-data dummy-content)))))))" "(html/sniptest \\"<div class\=\\\\\\"psdg-top-cell\\\\\\">Website.com</div>\\" [\:.psdg-top-cell] (html/content \\r\\n                              (name (first(keys (first (\:event-data dummy-content)))))))" "(print (mshp (\:event-data dummy-content)))" ";; Switching to mashup-dsl.templating namespace" "(print (mshp (\:event-data dummy-content)))" "(print (mshp (\:content events-for-mashup)))" "(\:content events-for-mashup)" "(print (mshp (\:content (events-for-mashup))))" "(events-for-mashup)" "(xx)" "(events-for-mashup)" "(map {} {\:title \:content} {\\"Events mashup\\" (vec (xx))})" "(map {} {\:title \:content} {\\"Events mashup\\" (xx)})" ";; Switching to mashup-dsl.templating namespace" "(mshp (\:data-content(data-for-mashup-stack)))" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" "(print (mshp (\:data-content(data-for-mashup-stack \\"events mashup\\" (xx)))))" "(mshp (\:data-content(data-for-mashup-stack \\"events mashup\\" (xx))))" "'(use camel-clojure.dsl)" "(use camel-clojure.dsl)" "(use 'camel-clojure.dsl)" ";; Switching to mashup-dsl.aggregation namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'mashup-dsl.aggregation)))" ";; Switching to mashup-dsl.datamodel namespace" "(parsing \\"http\://api.search.yahoo.com/WebSearchService/rss/\\r\\nwebSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\")" "(parsing \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\")" "(get-content-from-tags \\"(parsing \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\")\\" chanel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" chanel)" "(get-content-from-tags \\"(parsing \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\")\\" \:chanel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:chanel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:rss \:chanel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:rss \:chanel \:link)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:rss)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:rss \:channel)" "(get-content-from-tags \\"http\://api.search.yahoo.com/WebSearchService/rss/webSearch.xml?appid\=yahoosearchwebrss&query\=greyhounds\\" \:channel)" ";; Switching to mashup-dsl.aggregation namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'mashup-dsl.datamodel)))" ";; Switching to mashup-dsl.datamodel namespace" ";; Switching to mashup-dsl.aggregation namespace" "(aggregator-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" ";; Switching to mashup-dsl.aggregation namespace" "(aggregator-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" "(data2 data-url)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" "(let [start data-url\\r\\n\\tend   (mock \\"end\\")\\r\\n  enriching-with-data (enrich start (.getIn (.getBody data-url ))(data2 start) )\\r\\n\\tcamel (create (route (from start)\\r\\nenriching-with-data\\r\\n\\t\\t\\t     (to end)))]\\r\\n    (start-test camel start enriching-with-data end)\\r\\n    (stop-test camel))" "(ns mashup-dsl.content-enricher\\r\\n  (\:use [clojure.test]\\r\\n        [mashup-dsl.camel-dsl]\\r\\n        [clojure.set]\\r\\n\\r\\n    ;[net.cgrand.enlive-html \:as en-html]\\r\\n    [mashup-dsl.test-utils]\\r\\n    [mashup-dsl.datamodel]\\r\\n))" "(defn enrich[ex message url &key-data]\\r\\n;(message is map with starting data, data is list of attributes for data that we want to be added)\\r\\n((if not (nil? ex)\\r\\n(let [mess (.getIn (.getBody ex))]\\r\\nmerge-with union mess (data url))\\r\\n)))" "(deftest content-enricher-pattern\\r\\n  (let [start data-url\\r\\n\\tend   (mock \\"end\\")\\r\\n  enriching-with-data (enrich start (.getIn (.getBody data-url ))(data2 start) )\\r\\n\\tcamel (create (route (from start)\\r\\nenriching-with-data\\r\\n\\t\\t\\t     (to end)))]\\r\\n    (start-test camel start enriching-with-data end)\\r\\n    (stop-test camel)))" "(content-enricher-pattern)" "(-> data-url .getIn .getBody)" "(-> data-url Exchange.getIn Message.getBody)" "(data-url Exchange.getIn)" "(data-url Exchange.getIn.)" "(.. data-url getIn getBody)" "(aggregator-pattern)" ";; Switching to mashup-dsl.aggregation namespace" ";; Switching to mashup-dsl.test-utils namespace" "(aggregator-pattern)" "(deftest aggregator-pattern\\r\\n  (let [start (direct )\\r\\n\\tend  (mock \\"end\\")\\r\\n\\tf (fn [[body1 headers1] [body2 headers2]]\\r\\n\\t    (identity [(str body1 body2)\\r\\n\\t\\t       headers1]))\\r\\n\\r\\n\\tr (route (from start)\\r\\n\\t\\t (aggregator f \\"type\\" \:count 2)\\r\\n\\t\\t (to end))\\r\\n\\tcamel (create r)]\\r\\n    (start-test camel start end)\\r\\n    (send-text-message camel start \\"Java\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Clojure\\" \\"type\\" \\"t2\\")\\r\\n    (send-text-message camel start \\"Eclipse\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Emacs\\" \\"type\\" \\"t2\\")\\r\\n    \\r\\n    (let [messages (get-received-messages end)]\\r\\n      (is (\= (count messages) 2))\\r\\n      (is (\= (first messages) \\"JavaEclipse\\"))\\r\\n      (is (\= (second messages) \\"ClojureEmacs\\")))\\r\\n    (stop-test camel)))" "(aggregator-pattern)" ";; Switching to mashup-dsl.test-utils namespace" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" "(normalizer-pattern)" "(deftest normalizer-pattern\\r\\n  \\r\\n  (let [start data-url\\r\\n       end   (mock \\"end\\")\\t\\t\\t\\r\\n    xml-processing \\r\\n\\t\\t\\t\\t  (processor (map-tags-contents start \:events \:event \:description))\\r\\n\\t\\t\\t\\t  \\r\\n       routing (route (from start)\\r\\n               (router  (xml-processing))\\r\\n          (to end))\\r\\n\\r\\n\\tcamel (create (routing\\r\\n                 xml-processing))]\\r\\n    (start-test camel start end)\\r\\n \\r\\n    (is-message-count end 1)\\r\\n    (stop-test camel)))" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(normalizer-pattern)" ";; Switching to mashup-dsl.content-enricher namespace" "(content-enricher-pattern)" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(normalizer-pattern)" "(map-tags-contents data-url \:events \:event \:title)" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(normalizer-pattern)" "(aggregator-pattern)" "(deftest aggregator-pattern\\r\\n  (let [start (direct data-url)\\r\\n\\tend  (mock \\"end\\")\\r\\n\\tf (fn []\\r\\n\\t    (mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx)))))\\r\\n\\r\\n\\tr (route (from start)\\r\\n\\t\\t (aggregator f \\"type\\" \:count 2)\\r\\n\\t\\t (to end))\\r\\n\\tcamel (create r)]\\r\\n    (start-test camel start end)\\r\\n    (send-text-message camel start \\"Java\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Clojure\\" \\"type\\" \\"t2\\")\\r\\n    (send-text-message camel start \\"Eclipse\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Emacs\\" \\"type\\" \\"t2\\")\\r\\n    \\r\\n    (let [messages (get-received-messages end)]\\r\\n      (is (\= (count messages) 2))\\r\\n      (is (\= (first messages) \\"JavaEclipse\\"))\\r\\n      (is (\= (second messages) \\"ClojureEmacs\\")))\\r\\n    (stop-test camel)))" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" "(html/deftemplate mshp tmpl-html [content]\\r\\n      [\:\#psdg-top] (html/append (for [c (keys (first content))] (header-cell (name c))))\\r\\n      [\:.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))" "(ns mashup-dsl.templating \\r\\n  (\:use [net.cgrand.enlive-html \:as html] \\r\\n        [net.cgrand.moustache ]\\r\\n        [mashup-dsl.utils]\\r\\n        [mashup-dsl.datamodel \:as dm]\\r\\n  [clojure.pprint]))" "(html/deftemplate mshp tmpl-html [content]\\r\\n      [\:\#psdg-top] (html/append (for [c (keys (first content))] (header-cell (name c))))\\r\\n      [\:.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" "(aggregator-pattern)" "(deftest aggregator-pattern\\r\\n  (let [start (direct data-url)\\r\\n\\tend  (mock \\"end\\")\\r\\n\\tf (fn []\\r\\n\\t    (mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx)))))\\r\\n\\r\\n\\tr (route (from start)\\r\\n\\t\\t (aggregator f \\"type\\" \:count 2)\\r\\n\\t\\t (to end))\\r\\n\\tcamel (create r)]\\r\\n    (start-test camel start end)\\r\\n    (send-text-message camel start \\"Java\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Clojure\\" \\"type\\" \\"t2\\")\\r\\n    (send-text-message camel start \\"Eclipse\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Emacs\\" \\"type\\" \\"t2\\")\\r\\n    \\r\\n    (let [messages (get-received-messages end)]\\r\\n      (is (\= (count messages) 2))\\r\\n      (is (\= (first messages) \\"JavaEclipse\\"))\\r\\n      (is (\= (second messages) \\"ClojureEmacs\\")))\\r\\n    (stop-test camel)))" "(ns mashup-dsl.aggregation\\r\\n  (\:use [clojure.test]\\r\\n        [mashup-dsl.templating]\\r\\n        [mashup-dsl.camel-dsl]\\r\\n        [mashup-dsl.datamodel]\\r\\n     \\r\\n\\t[mashup-dsl.test-utils]\\r\\n ))" "(deftest aggregator-pattern\\r\\n  (let [start (direct data-url)\\r\\n\\tend  (mock \\"end\\")\\r\\n\\tf (fn []\\r\\n\\t    (mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx)))))\\r\\n\\r\\n\\tr (route (from start)\\r\\n\\t\\t (aggregator f \\"type\\" \:count 2)\\r\\n\\t\\t (to end))\\r\\n\\tcamel (create r)]\\r\\n    (start-test camel start end)\\r\\n    (send-text-message camel start \\"Java\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Clojure\\" \\"type\\" \\"t2\\")\\r\\n    (send-text-message camel start \\"Eclipse\\" \\"type\\" \\"t1\\")\\r\\n    (send-text-message camel start \\"Emacs\\" \\"type\\" \\"t2\\")\\r\\n    \\r\\n    (let [messages (get-received-messages end)]\\r\\n      (is (\= (count messages) 2))\\r\\n      (is (\= (first messages) \\"JavaEclipse\\"))\\r\\n      (is (\= (second messages) \\"ClojureEmacs\\")))\\r\\n    (stop-test camel)))" "(aggregator-pattern)" ";; Switching to mashup-dsl.datamodel namespace" "(get-content-from-tags data-url \:events \:event \:title)" "(map-tags-contents data-url \:events \:event \:title)" "(testing2)" "(def v1 [{\:name \\"name1\\" \:address \\"address1\\"} {\:name \\"name2\\" \:address \\"address2\\"}])" "(def v2 [{\:title \\"name1\\" \:dateOfBirth \\"1-1-1971\\"} {\:title \\"name3\\" \:dateOfBirth \\"1-1-1971\\"}])" "(dm-join v1 v2 \:name \:title)" "(clojure.set/join v1 v2 {\:name \:title})" "(seq \:name \:title)" "(seq (\:name \:title))" "(seq  [\:name \:title])" "(seq  {\:name \:title})" "(mapv key [\:name \:title])" "(mapv key ([\:name \:title]))" "(defn left-join [key-map xs ys]\\r\\n  (let [kes (seq key-map)\\r\\n        lks (mapv key kes)\\r\\n        rks (mapv val kes)\\r\\n        gxs (group-by \#(mapv (fn [k] (get % k)) lks) xs)\\r\\n        gys (dissoc (group-by \#(mapv (fn [v] (get % v)) rks) ys) nil)\\r\\n        kvs (keys gxs)]\\r\\n    (persistent\!\\r\\n     (reduce (fn [out kv]\\r\\n               (let [l (get gxs kv)\\r\\n                     r (get gys kv)]\\r\\n                 (if (seq r)\\r\\n                   (reduce (fn [out m1]\\r\\n                             (reduce (fn [out m2]\\r\\n                                       (conj\! out (merge m1 m2)))\\r\\n                                     out\\r\\n                                     r))\\r\\n                           out\\r\\n                           l)\\r\\n                   (reduce conj\! out l))))\\r\\n             (transient [])\\r\\n             kvs))))" "(left-join {\:name \:title} v1 v2)" "(val [\:name \:title])" "(mapv key [\:name \:title])" "(mapv key (seq  {\:name \:title}))" "(mapv val (seq  {\:name \:title}))" "(group-by \#(mapv (fn [k] (get % k)) (mapv key (seq  {\:name \:title}))) v1)" "(dissoc (group-by \#(mapv (fn [v] (get % v)) (mapv val (seq  {\:name \:title}))) v2) nil)" "(keys (group-by \#(mapv (fn [k] (get % k)) (mapv key (seq  {\:name \:title}))) v1))" "(get {\:name \\"something\\"} \:name)" "\\r\\n(defn filter [k1 k2]\\r\\n  (fn [d1 d2]\\r\\n    (for [m1 d1\\r\\n          m2 d2 \\r\\n      \:let [n1 (k1 m1)\\r\\n            t1 (k2 m2)]\\r\\n      \:when (\= n1 t1) ]\\r\\n    (merge m1 (dissoc m2 k2)))))\\r\\n\\r\\n\\r\\n(defn data-join [k1]\\r\\n  (fn [d1 d2]\\r\\n    (reduce (fn [acc t] \\r\\n          (map (fn [v1 v2] \\r\\n                (if (\= (k1 v1)\\r\\n                       (k1 v2))\\r\\n                  v1 v2)) (repeat t) acc))\\r\\n        d1 d2)))" " (->> v2 \\r\\n       ((mashup-dsl.datamodel/filter \:name \:title) v1  )\\r\\n       ((data-join \:name) v1))" "((mashup-dsl.datamodel/filter \:name \:title) v1  )" "(def feed1 (get-content-from-tags data-url \:events \:event \:title))" "(def feed2 (get-content-from-tags \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=Cher&api_key\=b25b959554ed76058ac220b7b2e0a026\\" \:artist))" "(def feed2 (get-content-from-tags \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=Cher&api_key\=b75950afc5678fba4e962def9105c1ee\\" \:artist))" "(left-join {\:title \:name} feed1 feed2)" "(left-join {\:title \:name} (feed1) (feed2))" "(feed1)" "feed1" "feed2" "(def lastfmurl \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=Cher&api_key\=b25b959554ed76058ac220b7b2e0a026\\")" "(map-tags-contents lastfmurl \:name)" "(map-tags-contents lastfmurl \:content)" "(map-tags-contents lastfmurl content)" "(feed1)" "(map-tags-contents data-url \:events \:event \:title)" "(map-tags-contents data-url \:events \:event)" ";; Switching to mashup-dsl.datamodel namespace" "(def data (en-html/xml-resource \\"your.xml\\"))\\r\\n(en-html/select data [\:events])" "(def datafromurl (en-html/xml-resource data-url))" "(letfn [(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:tag %)) coll))))]\\r\\n  (map \#(list (get-tag \:c %) (get-tag \:e (get-tag \:d %)))\\r\\n       (map \:content (\:content (clojure.xml/parse \\"foo.xml\\")))))" "(letfn [(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:tag %)) coll))))]\\r\\n  (map \#(list (get-tag \:c %) (get-tag \:e (get-tag \:d %)))\\r\\n       (map \:content (\:content (clojure.xml/parse data-url)))))" "(letfn [(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:event %)) coll))))]\\r\\n     (map \#(list (get-tag \:c %) (get-tag \:e (get-tag \:d %)))\\r\\n          (map \:content (\:content (clojure.xml/parse data-url)))))" "(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:event %)) coll))))" "(defn get-tag [tag coll] (\:content (first (filter \#(\= tag (\:event %)) coll))))" "(map \#(list (get-tag \:events %) (get-tag \:event (get-tag \:title %)))\\r\\n             (map \:content (\:content (clojure.xml/parse data-url))))" "(f)" "(\:content (clojure.xml/parse data-url))" "(\:content (\:content (clojure.xml/parse data-url)))" "(f)" "(\:total_items (\:content (clojure.xml/parse data-url)))" ";; Switching to mashup-dsl.datamodel namespace" "(f)" "(testing2)" "(f)" "(parsing data-url)" "(zipp (parse data-url))" "(get-content-from-tags data-url \:events \:event \:title)" "(map-tags-contents data-url \:events \:event \:title)" "(data data-url)" ";; Switching to mashup-dsl.datamodel namespace" "(f)" ";; Switching to mashup-dsl.datamodel namespace" "(f)" "(\:content (parsing data-url))" "(get-tag \:events (parsing data-url))" "(\:content (first (filter \#(\= \:events (\:tag %)) (parsing data-url))))" "(filter \#(\= \:events (\:tag %)) (\:content (parsing data-url)))" "(get-tag \:event data-url)" ";; Switching to mashup-dsl.datamodel namespace" "(parsing data-url)" "(get-tag \:events data-url)" "(\:content (first (filter \#(\= \:title (\:tag %)) (\:content (get-tag \:events data-url)))))" "(f)" "(get-contents data-url \:events \:event \:title)" "(get-contents data-url [\:events \:event \:title])" "(-> (parsing data-url) \:events \:event \:title)" "(map-tags-contents data-url \:events \:event \:title)" "(get-content-from-tags data-url \:events \:event \:title)" "(f)" "(get-tag \:title data-url)" "(zipp (parsing data-url))" "(get-events (zipp data-url))" "(zipp data-url)" "(zipp (parsing data-url))" "(get-events (zipp(parsing data-url)))" ";; Switching to mashup-dsl.datamodel namespace" "(def *some-xml*\\r\\n     \\"<?xml version\=\\\\\\"1.0\\\\\\" encoding\=\\\\\\"UTF-8\\\\\\"?>\\r\\n<books>\\r\\n  <book title\=\\\\\\"Some Guide To XML\\\\\\">\\r\\n    <author>\\r\\n      <name>P.T. Xarnum</name>\\r\\n      <email>pt@x.m.l</email>\\r\\n    </author>\\r\\n    <description>\\r\\n      Simply the most comprehensive XML Book on the market today.\\r\\n    </description>\\r\\n  </book>\\r\\n  <book title\=\\\\\\"Some Guide To Functional Programming\\\\\\">\\r\\n    <author>\\r\\n      <name>S. Hawking</name>\\r\\n      <email>universe@cambridge.ed.u</email>\\r\\n    </author>\\r\\n    <description>\\r\\n      This book is too smart for you, try 'Head first Quantum Mechanics for Dummies' instead.\\r\\n    </description>\\r\\n  </book>\\r\\n</books>\\")" "(prn ($x\:tag \\"/*\\" *some-xml*))" "(prn (map \#(-> % \:attrs \:title) ($x \\"//book\\" *some-xml*)))" "(prn ($x\:attrs* \\"//book\\" *some-xml* \:title))" "(prn ($x\:text \\"./author/name\\"\\r\\n              ($x\:node \\"//book[contains(@title,'XML')]\\" *some-xml*)))" "(prn ($x\:attrs* \\"/search/events/event/title\\" data-url ))" "(prn ($x\:tag \\"/*\\" data-url))" "(prn ($x\:tag \\"/*\\" (parsing data-url)))" ";; Switching to mashup-dsl.datamodel namespace" "(get-tags)" "(defn get-tags [] (clj-xp/$x\:text \\"/events/event/title\\" (xmldoc)))" "(get-tags)" "($x\:text \\"/events/event/title\\" (xmldoc))" "(def xmldoc\\r\\n     (memoize (fn [] (xml->doc (events-xml)))))" "(xml-> doc (events-xml))" "(xml -> doc (events-xml))" "(xml->doc (events-xml))" ";; Switching to mashup-dsl.datamodel namespace" "(xml->doc (events-xml))" "(slurp data-url)" "($x\:text \\"/events/event/title\\" (xmldoc))" "($x\:text \\"search/events/event/title\\" (xmldoc))" "(all-tags (xmldoc))" "\\n               (visit-nodes []\\r\\n               ($x \\"./*\\" (xmldoc))\\r\\n               (fn [p n]\\r\\n                 (printf \\"%s tag\:%s\\\\n\\"\\r\\n                         (apply str (interpose \\"/\\" (map name p)))\\r\\n                         (name (\:tag n)))))" "\\r\\n(comment (visit-nodes []\\r\\n               ($x \\"./*\\" (xmldoc))\\r\\n               (fn [p n]\\r\\n                 (printf \\"%s tag\:%s\\\\n\\"\\r\\n                         (apply str (interpose \\"/\\" (map name p)))\\r\\n                         (name (\:tag n))))))" "(visit-nodes []\\r\\n               ($x \\"./*\\" (xmldoc))\\r\\n               (fn [p n]\\r\\n                 (printf \\"%s tag\:%s\\\\n\\"\\r\\n                         (apply str (interpose \\"/\\" (map name p)))\\r\\n                         (name (\:tag n)))))" "(all-paths (xmldoc))" "(doseq [p (all-paths (xmldoc))]\\r\\n    (println p))" "(pp/pprint\\r\\n   (map\\r\\n    (fn [item]\\r\\n      {\:title ($x\:text \\"./title\\" item)\\r\\n       \:url  ($x\:text \\"./url\\" item)})\\r\\n    (take 5\\r\\n          ($x \\"/search/events/event\\" (xmldoc)))))" "(pp/pprint\\r\\n      (map\\r\\n       (fn [item]\\r\\n         {\:title ($x\:text \\"./title\\" item)\\r\\n          \:url  ($x\:text \\"./url\\" item)})\\r\\n       (take 5\\r\\n             ($x \\"/search/events/event\\" (xmldoc)))))" "(map\\r\\n          (fn [item]\\r\\n            {\:title ($x\:text \\"./title\\" item)\\r\\n             \:url  ($x\:text \\"./url\\" item)})\\r\\n          (take 5\\r\\n                ($x \\"/search/events/event\\" (xmldoc))))" ";; Switching to mashup-dsl.datamodel namespace" "(defn create-xpath [tag] (keyword tag))" "(defn create-xpath [tag] (str \\"./\\" tag))" "(map (create-tag %) \\"first\\" \\"second\\")" "(apply create-tag [\\"first\\" \\"second\\"])" "(def tags [\\"first\\" \\"second\\"])" "(doseq [tag tags] (create-tag tag))" "(fn [item](doseq [tag tags])(into {} (create-tag tag) ($\:text (create-xpath tag) item)) (take 5 ($x \\"/search/events/event\\" (xmldoc))))" "(fn [item](doseq [tag tags])(into {} (create-tag tag) ($x\:text (create-xpath tag) item)) (take 5 ($x \\"/search/events/event\\" (xmldoc))))" "(defn parse [item]\\n  (doseq [tag tags])(into {} (create-tag tag) ($x\:text (create-xpath tag) item)) )" "(def item (take 5 ($x \\"/search/events/event\\" (xmldoc))))" "(parse item)" "(create-xpath \\"url\\")" "(create-tag \\"url\\")" "(keyword \\"url\\")" "(defn parse [item]\\r\\n     (doseq [tag tags])(into {} (keyword tag) ($x\:text (create-xpath tag) item)) )" "(parse item)" "(doseq [tag tags])(into {} (keyword tag) ($x\:text (create-xpath tag) item))" "(doseq [tag tags])(conj {} (keyword tag) ($x\:text (create-xpath tag) item))" "(parse item)" "(doseq [tag tags](into {} ((keyword tag) ($x\:text (create-xpath tag) item))) )" "(defn tag-fn [tag] (partial $x\:text tag))" "(map (tag-fn \\"title\\") (take 5 ($x \\"//event\\" (xmldoc))))" "(map (juxt (tag-fn \\"url\\") (tag-fn \\"title\\")) (take 2 ($x \\"//event\\" (xmldoc))))" "(get-content-from-tags data-url \:events \:event \:title)" "(zipmap [\:title \:url] (map (juxt (tag-fn \\"url\\") (tag-fn \\"title\\")) (take 2 ($x \\"//event\\" (xmldoc)))))" "(def ks [\:title \:url])" "(map \#(zipmap ks %) (map (juxt (tag-fn \\"url\\") (tag-fn \\"title\\")) (take 2 ($x \\"//event\\" (xmldoc)))))" "(def ks [\:url \:title])" "(map \#(zipmap ks %) (map (juxt (tag-fn \\"url\\") (tag-fn \\"title\\")) (take 2 ($x \\"//event\\" (xmldoc)))))" "(def item1 ({\:title \\"title 1\\", \:url \\"url1\\"} {\:title \\"title 1\\", \:url \\"url1\\"}))" "(def item2 ({\:name \\"title 1\\", \:something \\"sss\\"} {\:name \\"title 2\\", \:something \\"ssss2222\\"}))" "(def item1 ({\:title \\"title 1\\", \:url \\"url1\\"} {\:title \\"title 2\\", \:url \\"url2\\"}))" "(clojure.set/join item1 item2 {\:title \:name})" "(clojure.set/join item1 item2 {\:name \:title})" "(def item1 [{\:title \\"title 1\\", \:url \\"url1\\"} {\:title \\"title 2\\", \:url \\"url2\\"}])" "(def item2 [{\:name \\"title 1\\", \:something \\"sss\\"} {\:name \\"title 2\\", \:something \\"ssss2222\\"}])" "(clojure.set/join item1 item2 {\:name \:title})" "(vec '(1 2 3))" "(vec item1)" "(def item1 ({\:title \\"title 1\\", \:url \\"url1\\"} {\:title \\"title 2\\", \:url \\"url2\\"}))" "(vec item1)" "(apply vec item1)" "(def item1 '({\:title \\"title 1\\", \:url \\"url1\\"} {\:title \\"title 2\\", \:url \\"url2\\"}))" "(vec item1)" " (def item2 '({\:name \\"title 1\\", \:something \\"sss\\"} {\:name \\"title 2\\", \:something \\"ssss2222\\"}))" "(clojure.set/join (vec item1) (vec item2) {\:name \:title})" "(vec '\#{\:something \\"sss\\" \:name \\"name1\\"})" "(\:title (parsing data-url))" "(\:search \:events \:event \:title (parsing data-url))" ";; Switching to mashup-dsl.datamodel namespace" "(get-in (parsing data-url) [\:search \:events \:event \:title])" "(get-in (parsing data-url) [\:events \:event \:title])" "(get-in (parsing data-url) [\:event \:title])" "(html/sniptest  \\"<h1>Lorem Ipsum</h1>\\"\\r\\n[\:h1] (h/content \\"Hello Reader\!\\"))" "(ns mashup-dsl.templating \\r\\n  (\:use [net.cgrand.enlive-html \:as html] \\r\\n        [net.cgrand.moustache ]\\r\\n        [mashup-dsl.utils]\\r\\n        [mashup-dsl.datamodel \:as dm]\\r\\n  [clojure.pprint]))" "(defn make-div [elements ] (map div-wrapper elements))" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" "(sniptest \\"<h1>Lorem Ipsum</h1>\\"\\r\\n[\:h1] (h/content \\"Hello Reader\!\\"))" "(sniptest \\"<h1>Lorem Ipsum</h1>\\"\\r\\n[\:h1] (content \\"Hello Reader\!\\"))" "(html-snippet \\"<p>x, <a id\=\\\\\\"home\\\\\\" href\=\\\\\\"/\\\\\\">y</a>, <a href\=\\\\\\"..\\\\\\">z</a></p>\\")" "(sniptest \\"<p>x, <a id\=\\\\\\"home\\\\\\" href\=\\\\\\"/\\\\\\">y</a>, <a href\=\\\\\\"..\\\\\\">z</a></p>\\"\\r\\n[\:a\#home] (set-attr \:href \\"http\://clojurebook.com\\")\\r\\n[[\:a (h/attr\= \:href \\"..\\")]] (content \\"go up\\"))" "(sniptest \\"<p>x, <a id\=\\\\\\"home\\\\\\" href\=\\\\\\"/\\\\\\">y</a>, <a href\=\\\\\\"..\\\\\\">z</a></p>\\"\\r\\n   [\:a\#home] (set-attr \:href \\"http\://clojurebook.com\\")\\r\\n   [[\:a (attr\= \:href \\"..\\")]] (content \\"go up\\"))" ";; Switching to mashup-dsl.templating namespace" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" "(html/deftemplate mshp tmpl-html [content]\\r\\n      [\:\#psdg-top] (html/append (for [c (keys (first content))] (header-cell (name c))))\\r\\n      [\:.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))" "(def tmpl-html\\r\\n  (html/html-snippet\\r\\n   \\"<html> <body><div id\=\\\\\\"psdg-top\\\\\\">\\r\\n    <div class\=\\\\\\"psdg-top-cell\\\\\\" style\=\\\\\\"width\:129px; text-align\:left; padding- left\:24px;\\\\\\">Summary</div>\\r\\n    \\r\\n    </div>\\r\\n    <div class\=\\\\\\"psdg-right\\\\\\">10 000</div> </body> </html>\\"))" "(html/deftemplate mshp tmpl-html [content]\\r\\n         [\:\#psdg-top] (html/append (for [c (keys (first content))] (header-cell (name c))))\\r\\n         [\:.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))" "(html/defsnippet header-cell tmpl-html [[\:.psdg-top-cell (html/nth-of-type 1)] ][value]\\r\\n  (html/content value))" "(html/defsnippet value-cell tmpl-html [[\:.psdg-right (html/nth-of-type 1)]] [value]\\r\\n  (html/content value))" "(html/deftemplate mshp tmpl-html [content]\\r\\n      [\:\#psdg-top] (html/append (for [c (keys (first content))] (header-cell (name c))))\\r\\n      [\:.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" "(mshp (\:data-content(dummy-content \\"events\\" (xx))))" "(def dummy-content\\r\\n {\:title \\"Events Mashup\\"\\r\\n   \:event-data [{ \:event-name \\"event name 1\\"\\r\\n                        \:performer \\"performer 1\\"\\r\\n                      \:date \\"date 1\\"\\r\\n                           \:start-time \\"start time 1\\"\\r\\n                           \:end-time \\"end time 1\\"}\\r\\n      {\:event-name \\"event name 2\\"\\r\\n                           \:performer \\"performer 2\\"\\r\\n                          \:date \\"date 2\\"\\r\\n                           \:start-time \\"start time 2\\"\\r\\n                           \:end-time \\"end time 2\\"}]})" "(mshp (\:data-content(dummy-content \\"events\\" (xx))))" "(mshp (\:data-content(dummy-content \\"events\\" (dm/xx))))" "(ns mashup-dsl.templating \\r\\n  (\:use [net.cgrand.enlive-html \:as html] \\r\\n        [net.cgrand.moustache ]\\r\\n        [mashup-dsl.utils]\\r\\n        [mashup-dsl.datamodel \:as dm]\\r\\n  [clojure.pprint]))" ";; Switching to mashup-dsl.templating namespace" "(ns mashup-dsl.templating \\r\\n  (\:use [net.cgrand.enlive-html \:as html] \\r\\n        [net.cgrand.moustache ]\\r\\n        [mashup-dsl.utils]\\r\\n        [mashup-dsl.datamodel \:as dm]\\r\\n  [clojure.pprint]))\\r\\n \\r\\n\\r\\n(def dummy-content\\r\\n {\:title \\"Events Mashup\\"\\r\\n   \:event-data [{ \:event-name \\"event name 1\\"\\r\\n                        \:performer \\"performer 1\\"\\r\\n                      \:date \\"date 1\\"\\r\\n                           \:start-time \\"start time 1\\"\\r\\n                           \:end-time \\"end time 1\\"}\\r\\n      {\:event-name \\"event name 2\\"\\r\\n                           \:performer \\"performer 2\\"\\r\\n                          \:date \\"date 2\\"\\r\\n                           \:start-time \\"start time 2\\"\\r\\n                           \:end-time \\"end time 2\\"}]})\\r\\n\\r\\n\\r\\n;define snippets for \\"cell\\" and \\"row\\"\\r\\n\\r\\n(def div-wrapper  (wrap \:div {\:class \\"psdg-right\\"}) )\\r\\n(def title-wrapper (wrap \:div {\:class \\"psdg-left\\"}))\\r\\n\\r\\n(defn make-div [elements ] (map div-wrapper elements))\\r\\n\\r\\n(defn make-a-row [title values]\\r\\n  (merge [ (title-wrapper title) (make-div values)]))\\r\\n\\r\\n\\r\\n(def template-div (html-resource \\"index.html\\"))\\r\\n\\r\\n(def cell-selector (select template-div  [\:div.psdg-right]))\\r\\n \\r\\n(defsnippet cell-model \\"index.html\\" cell-selector\\r\\n  [data]\\r\\n  [\:div.psdg-right] \\r\\n        (content data ))\\r\\n(def tmpl-html\\r\\n  (html/html-snippet\\r\\n   \\"<html> <body><div id\=\\\\\\"psdg-top\\\\\\">\\r\\n    <div class\=\\\\\\"psdg-top-cell\\\\\\" style\=\\\\\\"width\:129px; text-align\:left; padding- left\:24px;\\\\\\">Summary</div>\\r\\n    \\r\\n    </div>\\r\\n    <div class\=\\\\\\"psdg-right\\\\\\">10 000</div> </body> </html>\\"))\\r\\n\\r\\n;; define a snippet based on some divs in the template\\r\\n(html/defsnippet header-cell tmpl-html [[\:.psdg-top-cell (html/nth-of-type 1)] ][value]\\r\\n  (html/content value))\\r\\n\\r\\n(html/defsnippet value-cell tmpl-html [[\:.psdg-right (html/nth-of-type 1)]] [value]\\r\\n  (html/content value))\\r\\n\\r\\n;; define a template\\r\\n(html/deftemplate mshp tmpl-html [content]\\r\\n      [\:\#psdg-top] (html/append (for [c (keys (first content))] (header-cell (name c))))\\r\\n      [\:.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))" "(mshp (\:event-data dummy-content))" "(mshp (dm/parse))" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" ";; Switching to mashup-dsl.templating namespace" ";; Switching to mashup-dsl.datamodel namespace" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" "(html/deftemplate mshp tmpl-html [content]\\r\\n      [\:\#psdg-top] (html/append (for [c (keys (first content))] (header-cell (name c))))\\r\\n      [\:.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))" "(ns mashup-dsl.templating \\r\\n  (\:use [net.cgrand.enlive-html \:as html] \\r\\n        [net.cgrand.moustache ]\\r\\n        [mashup-dsl.utils]\\r\\n        [mashup-dsl.datamodel \:as dm]\\r\\n  [clojure.pprint]))" "(html/deftemplate mshp tmpl-html [content]\\r\\n         [\:\#psdg-top] (html/append (for [c (keys (first content))] (header-cell (name c))))\\r\\n         [\:.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))" "(mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))" "(data-for-mashup-stack \\"events\\" (xx))" "(item)" "(take 5 ($x \\"/search/events/event\\" (xmldoc)))" "(map \#(zipmap ks %) (map (juxt (create-xpath \\"url\\") (create-xpath \\"title\\")) (take 2 ($x \\"//event\\" (xmldoc)))))" "(ns mashup-dsl.datamodel\\r\\n  (\:use\\r\\n   ; [net.cgrand.enlive-html \:as en-html]\\r\\n     [clj-xpath.core]\\r\\n  ; [clojure.string \:as string]\\r\\n     )\\r\\n  (\:require\\r\\n    [clojure.zip \:as z] \\r\\n    [clojure.xml \:as xml ]\\r\\n    [clojure.data.zip.xml \:as zf]\\r\\n     [clojure.java.io \:as io]\\r\\n     [clojure.pprint \:as pp]\\r\\n     [clojure.string \:as s]\\r\\n    ))" "(map \#(zipmap ks %) (map (juxt (create-xpath \\"url\\") (create-xpath \\"title\\")) (take 2 ($x \\"//event\\" (xmldoc)))))" "(create-xpath \\"url\\")" "(map\\r\\n             (fn [item]\\r\\n               {\:title ($x\:text \\"./title\\" item)\\r\\n                \:url  ($x\:text \\"./url\\" item)})\\r\\n             (take 5\\r\\n                   ($x \\"/search/events/event\\" (xmldoc))))" "([] (map\\r\\n             (fn [item]\\r\\n               {\:title ($x\:text \\"./title\\" item)\\r\\n                \:url  ($x\:text \\"./url\\" item)})\\r\\n             (take 5\\r\\n                   ($x \\"/search/events/event\\" (xmldoc))))\\n    )" "(vector (map\\r\\n             (fn [item]\\r\\n               {\:title ($x\:text \\"./title\\" item)\\r\\n                \:url  ($x\:text \\"./url\\" item)})\\r\\n             (take 5\\r\\n                   ($x \\"/search/events/event\\" (xmldoc)))))" "(xx)" "(map {} {\:title \:content}{\\"Events mashup\\" (vec (map\\r\\n             (fn [item]\\r\\n               {\:title ($x\:text \\"./title\\" item)\\r\\n                \:url  ($x\:text \\"./url\\" item)})\\r\\n             (take 5\\r\\n                   ($x \\"/search/events/event\\" (xmldoc)))))})" "(mshp ((map {} {\:title \:content}{\\"Events mashup\\" (vec (map\\r\\n                (fn [item]\\r\\n                  {\:title ($x\:text \\"./title\\" item)\\r\\n                   \:url  ($x\:text \\"./url\\" item)})\\r\\n                (take 5\\r\\n                      ($x \\"/search/events/event\\" (xmldoc)))))})))" "(mshp ((map {} {\:title \:content}{\\"Events mashup\\" (vec (map\\r\\n                   (fn [item]\\r\\n                     {\:title ($x\:text \\"./title\\" item)\\r\\n                      \:url  ($x\:text \\"./url\\" item)})\\r\\n                   (take 5\\r\\n                         ($x \\"/search/events/event\\" (xmldoc)))))})))" "(ns mashup-dsl.templating \\r\\n  (\:use [net.cgrand.enlive-html \:as html] \\r\\n        [net.cgrand.moustache ]\\r\\n        [mashup-dsl.utils]\\r\\n        [mashup-dsl.datamodel \:as dm]\\r\\n  [clojure.pprint]))\\r\\n  \\r\\n\\r\\n(def dummy-content\\r\\n {\:title \\"Events Mashup\\"\\r\\n   \:event-data [{ \:event-name \\"event name 1\\"\\r\\n                        \:performer \\"performer 1\\"\\r\\n                      \:date \\"date 1\\"\\r\\n                           \:start-time \\"start time 1\\"\\r\\n                           \:end-time \\"end time 1\\"}\\r\\n      {\:event-name \\"event name 2\\"\\r\\n                           \:performer \\"performer 2\\"\\r\\n                          \:date \\"date 2\\"\\r\\n                           \:start-time \\"start time 2\\"\\r\\n                           \:end-time \\"end time 2\\"}]})\\r\\n\\r\\n\\r\\n;define snippets for \\"cell\\" and \\"row\\"\\r\\n\\r\\n(def div-wrapper  (wrap \:div {\:class \\"psdg-right\\"}) )\\r\\n(def title-wrapper (wrap \:div {\:class \\"psdg-left\\"}))\\r\\n\\r\\n(defn make-div [elements ] (map div-wrapper elements))\\r\\n\\r\\n(defn make-a-row [title values]\\r\\n  (merge [ (title-wrapper title) (make-div values)]))\\r\\n\\r\\n\\r\\n(def template-div (html-resource \\"index.html\\"))\\r\\n\\r\\n(def cell-selector (select template-div  [\:div.psdg-right]))\\r\\n \\r\\n(defsnippet cell-model \\"index.html\\" cell-selector\\r\\n  [data]\\r\\n  [\:div.psdg-right] \\r\\n        (content data ))\\r\\n(def tmpl-html\\r\\n  (html/html-snippet\\r\\n   \\"<html> <body><div id\=\\\\\\"psdg-top\\\\\\">\\r\\n    <div class\=\\\\\\"psdg-top-cell\\\\\\" style\=\\\\\\"width\:129px; text-align\:left; padding- left\:24px;\\\\\\">Summary</div>\\r\\n    \\r\\n    </div>\\r\\n    <div class\=\\\\\\"psdg-right\\\\\\">10 000</div> </body> </html>\\"))\\r\\n\\r\\n;; define a snippet based on some divs in the template\\r\\n(html/defsnippet header-cell tmpl-html [[\:.psdg-top-cell (html/nth-of-type 1)] ][value]\\r\\n  (html/content value))\\r\\n\\r\\n(html/defsnippet value-cell tmpl-html [[\:.psdg-right (html/nth-of-type 1)]] [value]\\r\\n  (html/content value))\\r\\n\\r\\n;; define a template\\r\\n(html/deftemplate mshp tmpl-html [content]\\r\\n      [\:\#psdg-top] (html/append (for [c (keys (first content))] (header-cell (name c))))\\r\\n      [\:.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))\\r\\n\\r\\n\\r\\n;call to my lovely template (mshp (\:data-content(data-for-mashup-stack \\"events\\" (xx))))\\r\\n;ovaj xx nesto nece tako da ovo (mshp (\:event-data dummy-content)) radi\\r\\n\\r\\n;(defn map-of-data [](into [] (map \#(into [](vals %)) (\:event-data dummy-content))))\\r\\n\\r\\n;(deftemplate t2 \\"index.html\\" [title data] \\r\\n ; [\:div.psdg-left]  (substitute (make-a-row title data)))\\r\\n\\r\\n\\r\\n;(def table-template (html/html-resource \\"index2.html\\"))\\r\\n\\r\\n;(def ^\:dynamic *section-sel* {[\:title][[\:tbody (attr\= \:title \\"events\\")]]})\\r\\n\\r\\n\\r\\n\\r\\n;(deftemplate indeks table-template\\r\\n ;[{\:keys  [title event-data]}]\\r\\n;[\:title] (html/content title)\\r\\n;[\:tbody]  (html/content (map \#(row-snippet %) (create-map-of-events)\\r\\n ;                          )))\\r\\n;(def mapping-templates\\r\\n ; {\\"event-title\\" \:event-name\\r\\n ;  \\"performer\\" \:performers\\r\\n ;  \\"date\\" \:date\\r\\n;   \\"start-time\\" \:start-time\\r\\n  ; \\"end-time\\" \:end-time\\r\\n   ;\\"mbid\\" \:mbid\\r\\n  ; \\"url\\" \:url})\\r\\n\\r\\n;(deftemplate indeks table-template [{\:keys  [title data-content]}]\\r\\n ; [\:title] (html/content title)\\r\\n  ;[[\:tr (nth-child 2)]] (html/clone-for [event data-content]\\r\\n   ;                     [\:td] (fn [td] (assoc td \:content [(-> td \:attrs \:title mapping-templates event)]))));show the page\\r\\n;ovde bi trebalo map [\:td] na contents\\r\\n(def routes \\r\\n     (app\\r\\n      [\\"\\"]  (fn [req] (render-to-response (mshp (\:data-content(data-for-mashup-stack \\"events mashup\\" (xx))))))\\r\\n      ;(fn [req] render-to-response (indeks content-t))\\r\\n      [&]   page-not-found))\\r\\n\\r\\n;; \=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\\r\\n;; The App\\r\\n;; \=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\\r\\n\\r\\n(defonce ^\:dynamic *server* (run-server routes))" "(mshp ((map {} {\:title \:content}{\\"Events mashup\\" (vec (map\\r\\n                      (fn [item]\\r\\n                        {\:title ($x\:text \\"./title\\" item)\\r\\n                         \:url  ($x\:text \\"./url\\" item)})\\r\\n                      (take 5\\r\\n                            ($x \\"/search/events/event\\" (xmldoc)))))})))" "(mshp (msp-content))" "(mshp (mshp-content))" "(mshp (msh-content))" "(mshp (msh-contents))" "(mshp (dummy-content))" "(header-cell \\"something\\")" "(value-cell \\"something\\")" "(for [c (keys (first (dummy-content)))] (header-cell (name c)))" "(first dummy-content)" "(nth 2 dummy-content)" "(nth dummy-content 2)" "(second dummy)" "(second dummy-content)" "(html/deftemplate mshp tmpl-html [content]\\r\\n      [\:\#psdg-top] (html/append (for [c (keys (second content))] (header-cell (name c))))\\r\\n      [\:.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))" "(mshp tmpl-html dummy-content)" "(mshp dummy-content)" "(html/sniptest tmpl-html [\:psdg-top])" "(html/sniptest \\"index.html\\" [\:psdg-top])" "(html/sniptest template-div [\:psdg-top])" "(html/sniptest template-div [\:div.psdg-top])" "(html/select template-div [\:div.psdg-top])" "(cell-selector)" "(mshp dummy-content)" "(def tmpl-html\\r\\n  (html/html-resource\\r\\n   \\"<html> <body><div id\=\\\\\\"psdg-top\\\\\\">\\r\\n    <div class\=\\\\\\"psdg-top-cell\\\\\\" style\=\\\\\\"width\:129px; text-align\:left; padding- left\:24px;\\\\\\">Summary</div>\\r\\n    \\r\\n    </div>\\r\\n    <div class\=\\\\\\"psdg-right\\\\\\">10 000</div> </body> </html>\\"))" "(html/html-resource\\r\\n   \\"<html> <body><div id\=\\\\\\"psdg-top\\\\\\">\\r\\n    <div class\=\\\\\\"psdg-top-cell\\\\\\" style\=\\\\\\"width\:129px; text-align\:left; padding- left\:24px;\\\\\\">Summary</div>\\r\\n    \\r\\n    </div>\\r\\n    <div class\=\\\\\\"psdg-right\\\\\\">10 000</div> </body> </html>\\")" "(template-div)" "(html/html-resource \\"index.html\\")" "(def cell-selector (html/select template-div  [\:div.psdg-right]))" "(cell-selector)" "(html/select template-div  [\:div.psdg-right])" "(cell-selector \\"something\\")" "(pprint (cell-selector \\"something\\"))" "(html/defsnippet cell-model \\"index.html\\" cell-selector\\r\\n  [data]\\r\\n  [\:div.psdg-right] \\r\\n        (html/content data ))" "(cell-model \\"something\\")" "(def cell-selector (html/select template-div  [\:div.psdg-right]))" "(cell-model \\"something\\")" "(defn template-div[] (html/html-resource \\"index.html\\"))" "(template-div)" "(html/defsnippet header-cell template-div [[\:div.psdg-top-cell (html/nth-of-type 1)]][value]\\r\\n  (html/content value))" "(html/defsnippet header-cell (template-div) [[\:div.psdg-top-cell (html/nth-of-type 1)]][value]\\r\\n  (html/content value))" "(header-cell \\"something\\")" "(html/defsnippet value-cell (template-div) [[\:div.psdg-right (html/nth-of-type 1)]] [value]\\r\\n  (html/content value))" "(value-cell \\"something\\")" "(html/defsnippet value-cell (template-div) [\:div.psdg-right] [value]\\r\\n     (html/content value))" "(value-cell \\"something\\")" "(html/deftemplate mshp tmpl-html [content]\\r\\n      [\:\#psdg-top] (html/append (for [c (keys (second content))] (header-cell (name c))))\\r\\n      [\:div.psdg-right] (html/append (for [c (mapcat vals content)] (value-cell c))))" "(mshp [\\"1\\" \\"2\\" \\"3\\"])" "(mshp dummy-content)" "(second dummy-content)" "(keys (second dummy-content))" "(keys {\:end-time \\"end time 1\\", \:date \\"date 1\\", \:event-name \\"event name 1\\", \:start-time \\"start time 1\\", \:performer \\"performer 1\\"})" "(vals (second dummy-content))" "(into {} (second dummy-content))" "(\:event-data (second dummy-content))" ";; Switching to mashup-dsl.templating namespace" "(xx)" "(events-for-mashup)" "(mm)" "(msh-contents)" "(data-for-mashup \\"events\\" (msh-contents))" "(data-for-mashup-stack \\"events\\" (msh-contents))" "(\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents)))" "      ;(fn [req] render-to-response (indeks content-t))" "(mshp (\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents))))" "(for [c (mapcat vals content)] (\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents)))(value-cell c))" "(for [c (mapcat vals (\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents))))](value-cell c) )" "(mapcat vals (\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents))))" "(\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents)))" "(let [[title contents] (\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents)))] (str \\"title\\" tit;e \\"contents\\" contents))\\n                                                                                                   ))" "(let [[title contents] (\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents)))] \\n  (str \\"title\\" title \\"contents\\" contents))" "(let [[title contents] (\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents)))] \\r\\n     (str \\"title\\" title (mapcat vals contents)))" "(let [[title contents] (\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents)))] \\r\\n        (mapcat vals contents))" "(let [[title contents] (\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents)))] \\r\\n           (vals contents))" "(let [[title contents] (\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents)))] \\r\\n           (keys contents))" "(let [[title contents] (\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents)))] \\r\\n           (contents))" "(let [[title contents] (\:data-content(data-for-mashup-stack \\"events mashup\\" (msh-contents)))] \\r\\n     (str \\"title\\" title \\"   prazno  \\"  \\"   contents\\" contents))" "(zipmap [ \:data-content \:title] [ (msh-contents) \\"events mashup\\"])" "(msh-contents)" "(vec (msh-contents))" "(msh-contents)" "(defn msh-contents [](zipmap [ \:data-content \:title] [\\"Events mashup\\" (vec (map\\r\\n                         (fn [item]\\r\\n                           {\:title ($x\:text \\"./title\\" item)\\r\\n                            \:url  ($x\:text \\"./url\\" item)})\\r\\n                         (take 5\\r\\n                               ($x \\"/search/events/event\\" (xmldoc)))))]))" "(msh-contents)" "(\:data-content (msh-contents))" "([let [first &rest] (\:data-content (msh-contents))] (keys first))" "([let [first &rest] (\:data-content (msh-contents))] (stre \\"first \\" first))" "(\:data-content msh-contents)" "(msh-contents)" "(\:data-content (msh-contents))" "(first (\:data-content (msh-contents)))" "(keys (first (\:data-content (msh-contents))))" "(for [k (keys(first (\:data-content content)))] (header-cell (name k)))" "(for [k (vec(keys(first (\:data-content content))))] (header-cell (name k)))" "(vec(keys(first (\:data-content content))))" "(for [k (vec(keys(first (\:data-content (msh-contents)))))] (header-cell (name k)))" "(for [c (vec(vals (\:data-content (msh-contents))))] (value-cell c))" "(vals (\:data-content (msh-contents)))" "(\:data-content (msh-contents))" "(for[e (\:data-content (msh-contents))] (vals e))" "(map (value-cell %) (for[e (\:data-content (msh-contents))] (vals e)) )" "(map \#(value-cell %) (for[e (\:data-content (msh-contents))] (vals e)) )" "(mshp (msh-contents))" "(html/select [\:\#psdg-top] (html-resource \\"index html\\"))" "(mshp (\:event-data dummy-content))" "(sniptest (template-div)  \\n          [\:\#psdg-top] (html/append (for [c (keys (first (\:data-content content)))] (header-cell (name c)))))" "(html/sniptest (template-div)  \\r\\n             [\:\#psdg-top] (html/append (for [c (keys (first (\:data-content content)))] (header-cell (name c)))))" "(template-div)" "(html/sniptest (template-div)  \\r\\n                [\:div.psdg-top-cell] (html/append (for [c (keys (first (\:data-content content)))] (header-cell (name c)))))" "(html/sniptest (template-div)  \\r\\n                   [\:div.psdg-top-cell] (html/content (for [c (keys (first (\:data-content content)))] (header-cell (name c)))))" "(pr-str (html/sniptest (template-div)  \\r\\n                      [\:div.psdg-top-cell] (html/content (for [c (keys (first (\:data-content content)))] (header-cell (name c))))))" "(pr-str (html/sniptest (template-div)  \\n                        [\:div.psdg-right] (html/append (apply map \#(value-cell %) (for[e (\:data-content (content))] (vals e))))))" "(apply map \#(value-cell %) (for[e (\:data-content (msh-contents))] (vals e)))" "(doall( map \#(value-cell %) (for[e (\:data-content (msh-contents))] (vals e))))" "(mshp (msh-contents))" "(pr-str (html/sniptest (template-div)  \\r\\n                           [\:div.psdg-right] (html/append (doall(map \#(value-cell %) (for[e (\:data-content (content))] (vals e)))))))" "(pr-str (html/sniptest (template-div)  \\r\\n                              [\:div.psdg-right] (html/append (doall(map \#(value-cell %) (for[e (\:data-content (msh-contents))] (vals e)))))))" "(pr-str (html/sniptest (template-div)  \\r\\n                                 [\:div.psdg-right] (doall(html/append (map \#(value-cell %) (for[e (\:data-content (msh-contents))] (vals e)))))))" "(html/sniptest (template-div)  \\r\\n                                    [\:div.psdg-right] (html/append (map \#(value-cell %) (for[e (\:data-content (msh-contents))] (vals e)))))" "(eval (html/sniptest (template-div)  \\r\\n                                       [\:div.psdg-right] (html/append (map \#(value-cell %) (for[e (\:data-content (msh-contents))] (vals e))))))" "(html/sniptest (template-div)\\n               [\:div.psdg-top-cell] (html/content (for [c (keys (first (\:data-content cont)))] (header-cell (name c)))))" "(html/sniptest (template-div)\\r\\n                  [\:div.psdg-top-cell] (html/content (for [c (keys (first (\:data-content (msh-contents))))] (header-cell (name c)))))" "(html/emit* (mshp (msh-contents)))" "(print (apply str (html/emit*(html/sniptest (template-div)\\r\\n                     [\:div.psdg-top-cell] (html/content (for [c (keys (first (\:data-content (msh-contents))))] (header-cell (name c)))))\\r\\n)))" "(template-div)" " (map \#(value-cell %) (for[e (\:data-content (msh-contents))] (vals e)) )" " (for [k (vec(keys(first (\:data-content (msh-contents)))))] (header-cell (name k)))" "(for [k (vec(keys(first (\:data-content (msh-contents)))))] (header-cell (name k)))" "(vec(keys(first (\:data-content (msh-contents)))))" "(header-cell (name [\:title \:url]))" "(name [\:title \:url])" "(name \:k)" "(header-cell \\"k\\")" " (pprint (select (template-div) [[\:div.Heading \:div.Cell]]))" "(pprint (select (template-div) [[\:div.Heading ]]))" "(pprint (select (template-div) [[\:div.Heading \:.Cell]]))" "(pprint (select (template-div) [[\:div.Heading \:div.Cell]]))" "(pprint (select (template-div) [\:div.Heading \:div.Cell]))" "(map \#(value-cell %) (for[e (\:data-content (cont))] (vals e)))" "(for [c (keys (first (\:data-content (msh-contents))))] (header-cell (name c)))" "(mshp (msh-contents))" "(print (apply str (html/emit* (html/sniptest(html/content (for [c (keys (first (\:data-content cont)))] (header-cell (name c))))))))" "(print (apply str (html/emit* \\n                    (html/sniptest(html/content (for [c (keys (first (\:data-content (msh-contents))))] (header-cell (name c))))))))" "(print (apply str (html/emit* \\r\\n                       (html/content (for [c (keys (first (\:data-content (msh-contents))))] (header-cell (name c)))))))" "(html/sniptest  (html/content (for [c (keys (first (\:data-content (msh-contents))))] (header-cell (name c)))))" "(html/sniptest  (template-div) [\:div.Heading]\\n  (html/content (for [c (keys (first (\:data-content (msh-contents))))] (header-cell (name c)))))" "(html/sniptest  (template-div) [\:div.Heading]\\r\\n     (doall (html/content (for [c (keys (first (\:data-content (msh-contents))))] (header-cell (name c))))))" "(print (apply str (html/emit*(html/sniptest  (template-div) [\:div.Heading]\\r\\n     (html/content (for [c (keys (first (\:data-content (msh-contents))))] (header-cell (name c))))))))" "(print (apply (str (mshp (msh-contents)))))" "(print (apply str (mshp (msh-contents))))" ";; Switching to mashup-dsl.templating namespace" "(value-cell \\"somethng\\")" "(map \#(value-cell %) (for[e (\:data-content (msh-contents))] (vals e)))" "(html/sniptest  [\:div.Row] (html/content (map \#(value-cell %) (for[e (\:data-content (msh-contents))] (vals e)))))" ";; Switching to mashup-dsl.templating namespace" "(html/sniptest (template-div) [\:div.Row]  (html/content (map \#(value-cell %) (for[e (\:data-content (msh-contents))] (vals e)))) )" "(msh-contents)" "(require '[net.cgrand.enlive-html \:as h])" "\\r\\n    (def msh-contents {\:title \\"Events mashup\\",\\r\\n    \:data-content [{\:title \\"ICTM Study Group \\", \:url \\"http\://eventful.com/belgrade/events/ictm-study-group-music-and-dance-southeastern-euro-\\"} \\r\\n    {\:title \\"Volodja Balzalorsky - Hinko Haas\\", \:url \\"http\://eventful.com/belgrade/events/volodja-balzalorsky-hinko-haas\\"} {\:title \\"Volodja Balzalorsky - Amael Piano Trio\\", \:url \\"http\://eventful.com/belgrade/events/volodja-balzalorsky-amael-piano-trio-\\"} ]})" "\\r\\n    (def msh-contents2 {\:title \\"Events mashup\\",\\r\\n    \:data-content [{\:title \\"ICTM Study Group \\", \:url \\"http\://eventful.com/belgrade/events/ictm-study-group-music-and-dance-southeastern-euro-\\"} \\r\\n    {\:title \\"Volodja Balzalorsky - Hinko Haas\\", \:url \\"http\://eventful.com/belgrade/events/volodja-balzalorsky-hinko-haas\\"} {\:title \\"Volodja Balzalorsky - Amael Piano Trio\\", \:url \\"http\://eventful.com/belgrade/events/volodja-balzalorsky-amael-piano-trio-\\"} ]})" "  (defn template-div[] (h/html-resource \\"<style type\=\\"text/css\\">\\r\\n    .Table\\r\\n    {\\r\\n        display\: table;\\r\\n    }\\r\\n    .Title\\r\\n    {\\r\\n        display\: table-caption;\\r\\n        text-align\: center;\\r\\n        font-weight\: bold;\\r\\n        font-size\: larger;\\r\\n    }\\r\\n    .Heading\\r\\n    {\\r\\n        display\: table-row;\\r\\n        font-weight\: bold;\\r\\n        text-align\: center;\\r\\n    }\\r\\n    .Row\\r\\n    {\\r\\n        display\: table-row;\\r\\n    }\\r\\n    .Cell\\r\\n    {\\r\\n        display\: table-cell;\\r\\n        border\: solid;\\r\\n        border-width\: thin;\\r\\n        padding-left\: 5px;\\r\\n        padding-right\: 5px;\\r\\n    }\\r\\n</style>\\r\\n<div class\=\\"Table\\">\\r\\n    <div class\=\\"Title\\">\\r\\n        <p>This is a Table</p>\\r\\n    </div>\\r\\n    <div class\=\\"Heading\\">\\r\\n        <div class\=\\"Cell\\">\\r\\n            <p>Heading 1</p>\\r\\n        </div>\\r\\n        <div class\=\\"Cell\\">\\r\\n            <p>Heading 2</p>\\r\\n        </div>\\r\\n        <div class\=\\"Cell\\">\\r\\n            <p>Heading 3</p>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class\=\\"Row\\">\\r\\n        <div class\=\\"Cell\\">\\r\\n            <p>Row 1 Column 1</p>\\r\\n        </div>\\r\\n        <div class\=\\"Cell\\">\\r\\n            <p>Row 1 Column 2</p>\\r\\n        </div>\\r\\n        <div class\=\\"Cell\\">\\r\\n            <p>Row 1 Column 3</p>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class\=\\"Row\\">\\r\\n        <div class\=\\"Cell\\">\\r\\n            <p>Row 2 Column 1</p>\\r\\n        </div>\\r\\n        <div class\=\\"Cell\\">\\r\\n            <p>Row 2 Column 2</p>\\r\\n        </div>\\r\\n        <div class\=\\"Cell\\">\\r\\n            <p>Row 2 Column 3</p>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\"))" "(defn template-div[] (h/html-resource \\"index.html\\")\\n  )" " (h/defsnippet value-cell (template-div) \\r\\n    [\:div.Row \:div.Cell] [value]\\r\\n     (h/content value))" "(h/sniptest (template-div) \\r\\n    [\:div.Row]  (content (map \#(value-cell %) \\r\\n    (for[e(\:data-content (msh-contents2))] (vals e)))))" "(template-div)" "(h/sniptest (template-div) \\r\\n       [\:div.Row]  (h/content (map \#(value-cell %) \\r\\n       (for[e(\:data-content (msh-contents2))] (vals e)))))" "(msh-contents2)" "(h/sniptest (template-div) \\r\\n          [\:div.Row]  (h/content (map \#(value-cell %) \\r\\n          (for[e(\:data-content msh-contents2)] (vals e)))))" "(apply str (h/sniptest (template-div) \\r\\n             [\:div.Row]  (h/content (map \#(value-cell %) \\r\\n             (for[e(\:data-content msh-contents2)] (vals e))))))" "(h/sniptest (clojure.string/join (h/emit* (template-div)))  \\r\\n [\:div.Row]  (h/content (map \#(value-cell %) \\r\\n (for [e(\:data-content msh-contents2)] \\r\\n  (vals e)))))" "(mshp (msh-contents))" "(h/sniptest (template-div) [\:div.Row \:div.Cell] (h/clone-for [e (\:data-content (msh-contents))] (h/content e)))" "(h/sniptest (clojure.string/join \\n              (h/emit* (template-div) [\:div.Row \:div.Cell] (h/clone-for [e (\:data-content (msh-contents))] (h/content e)))))" "(h/sniptest (clojure.string/join (h/emit* (template-div)\\n                                          [\:div.Row \:div.Cell] (h/clone-for [e (\:data-content (msh-contents))] (h/content e)))))" "(h/sniptest (clojure.string/join (h/emit* (template-div)))\\n             [\:div.Row \:div.Cell] (h/clone-for [e (\:data-content (msh-contents))] (h/content e)))" "(clojure.string/join (mshp (msh-contents)))" "(clojure.string/join (mshp msh-contents))" "(template-div)" "(normalizer-pattern)" "(deftest normalizer-pattern\\r\\n  \\r\\n  (let [start (direct data-url)\\r\\n       end   (mock \\"normalized\\")\\t\\t\\t\\r\\n    xml-processing \\r\\n\\t\\t\\t\\t  (route (from start)\\r\\n            ( process \#(msh-contents))\\r\\n            (to end))\\r\\n\\tcamel (create \\r\\n             xml-processing\\r\\n         \\r\\n                 )]\\r\\n    (start-test camel start end)\\r\\n \\r\\n    (is-message-count end 1)\\r\\n    (stop-test camel)))" "(ns mashup-dsl.normalizer\\r\\n\\r\\n  (\:use [clojure.test]\\r\\n        [mashup-dsl.camel-dsl]\\r\\n    [net.cgrand.enlive-html \:as en-html]\\r\\n   [mashup-dsl.datamodel]\\r\\n\\t[mashup-dsl.test-utils]\\r\\n)\\r\\n(\:import [org.apache.camel.component.mock MockEndpoint]\\r\\n\\t  \\r\\n\\t   [org.apache.camel ProducerTemplate]\\r\\n    [org.apache.camel.component.file FileEndpoint]\\r\\n    [org.apache.camel.component.file FileComponent]))" "(defn- init [context endpoints]\\r\\n  (if-not (empty? endpoints)\\r\\n    (do (.setCamelContext (first endpoints) context)\\r\\n    (recur context (rest endpoints)))))" "(deftest normalizer-pattern\\r\\n  \\r\\n  (let [start (direct data-url)\\r\\n       end   (mock \\"normalized\\")\\t\\t\\t\\r\\n    xml-processing \\r\\n\\t\\t\\t\\t  (route (from start)\\r\\n            ( process \#(msh-contents))\\r\\n            (to end))\\r\\n\\tcamel (create \\r\\n             xml-processing\\r\\n         \\r\\n                 )]\\r\\n    (start-test camel start end)\\r\\n \\r\\n    (is-message-count end 1)\\r\\n    (stop-test camel)))" "(normalizer-pattern)" "(let [start (direct data-url)\\r\\n       end   (mock \\"normalized\\")\\t\\t\\t\\r\\n    xml-processing \\r\\n\\t\\t\\t\\t  (route (from start)\\r\\n            ( process \#(msh-contents))\\r\\n            (to end))\\r\\n\\tcamel (create \\r\\n             xml-processing\\r\\n         \\r\\n                 )]\\r\\n    (start-test camel start end)\\r\\n \\r\\n    (stop-test camel))" ";; Switching to mashup-dsl.aggregation namespace" "(normalizer-pattern)" "(deftest normalizer-pattern\\r\\n  \\r\\n  (let [start (direct data-url)\\r\\n       end   (mock \\"normalized\\")\\t\\t\\t\\r\\n    xml-processing \\r\\n\\t\\t\\t\\t  (route (from start)\\r\\n            ( process \#(msh-contents))\\r\\n            (to end))\\r\\n\\tcamel (create \\r\\n             xml-processing\\r\\n         \\r\\n                 )]\\r\\n    (start-test camel start end)\\r\\n \\r\\n    ;(is-message-count end 1)\\r\\n    (stop-test camel)))" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(route (from (direct data-url))\\r\\n(process \#(msh-contents))\\r\\n(to end))" "(route (from (direct data-url))\\r\\n   (process \#(msh-contents))\\r\\n   (to (mock \\"normalized\\")))" "(let [normalize-xml (route (from (direct data-url)) (process msh-contents) (to (mock end)))] (create normalize-xml))" "(let [normalize-xml (route (from (direct data-url)) (process msh-contents) (to (mock \\"normalized\\")))] (create normalize-xml))" "(deftest content-enricher-pattern\\r\\n  (let [ \\r\\n  start (direct data-url)\\r\\n mashed (mock \\"mash\\")\\r\\n\\r\\n  camel (create (route (from start)\\r\\n                       (process (map-tags-contents data-url \:events))\\r\\n                       (to mashed)))]\\r\\n    (start-test camel start mashed)\\r\\n    (stop-test camel)\\r\\n    ))" "(content-enricher-pattern)" "(defn root-data [xml &tags] \\r\\n(zf/xml-> xml \:events \:event))" "(\:require \\r\\n [clojure.data.zip.xml \:as zf]\\r\\n)" "(defn root-data [xml &tags] \\r\\n   (zf/xml-> xml \:events \:event))" "(ns mashup-dsl.datamodel\\r\\n  (\:use\\r\\n    [clj-xpath.core]\\r\\n     )\\r\\n  (\:require\\r\\n    [clojure.zip \:as z] \\r\\n    [clojure.xml \:as xml ]\\r\\n    [clojure.data.zip.xml \:as zf]\\r\\n    [clojure.java.io \:as io]\\r\\n    [clojure.pprint \:as pp]\\r\\n    [clojure.string \:as s]\\r\\n    ))" "(defn root-data [xml &tags] \\r\\n      (zf/xml-> xml \:events \:event))" "(get-events (parsing data-url) \:title \:url)" "(get-events (zipp data-url) \:title \:url)" "(root-data (zipp data-url \:events \:event))" "(root-data (zipp data-url) \:events \:event)" "(root-data (zipp data-url) [\:events \:event])" "(zf/xml-> (zipp data-url) \:events \:event)" "(testing2)" "(defn get-events;ovo ne daje nista\\r\\n [xml & tags]\\r\\n  (let [events (zf/xml-> xml \:events \:event)\\r\\n        fs     (map selector tags)]\\r\\n    (map (apply juxt fs) events)))" "(testing)" "(testing2)" "(all-tags xmldoc)" "(all-tags events-xml)" "( xmldoc)" "(cc)" "(mm)" "(msh-contents)" ";; Switching to mashup-dsl.datamodel namespace" "(tag \\"ss\\")" "(to-keys \\"ss\\" \\"nn\\")" "(keyword \\"ss\\")" "(create-xpath \\"tt\\")" "(defn msh-contents2 [mshpname root-tag & tags]\\n  (zipmap [\:data-contents \:title] \\n          [(vec (map ( fn[item] \\n                      ( for[tag tags]\\n                        {(keyword tag) ($x\:text(create-xpath tag))}))))]))" "(msh-contents2 \\"events-mashup\\" \\"/search/events/event\\" \\"title\\" \\"url\\")" "(defn msh-contents2 [mshpname root-tag & tags]\\r\\n     (zipmap [\:data-contents \:title] \\r\\n             [(vec (map ( fn[item] \\r\\n                         ( for[tag tags]\\r\\n                           {(keyword tag) ($x\:text(create-xpath tag))}))\\n                        (take 5\\r\\n                               ($x root-tag (xmldoc))))) mshpname]))" "(msh-contents2 \\"events\\" \\"/search/events/event\\" \\"title\\" \\"url\\")" "(msh-contents2 \\"events\\" \\"/search/events/event\\" '(\\"title\\" \\"url\\"))" "({(keyword \\"ss\\") ($x\:text(create-xpath \\"ss\\"))})" "(defn msh-contents2 [mshpname root-tag & tags]\\r\\n        (zipmap [\:data-contents \:title] \\r\\n                [(vec (map ( fn[item] \\r\\n                            ( for[tag tags]\\r\\n                              {(keyword tag) ($x\:text(create-xpath tag)) item}))\\r\\n                           (take 5\\r\\n                                  ($x root-tag (xmldoc))))) mshpname]))" "(msh-contents2 \\"events\\" \\"/search/events/event\\" \\"title\\" \\"url\\")" "(msh-contents)" "(clojure.set/join (vec item1) (vec item2) {\:name \:title})" "(merge-data item1 item2 {\:name \:title})" ";; Switching to mashup-dsl.persistance namespace" "(let [conn (mg/connect)\\r\\n      db   (mg/get-db conn \\"monger-test\\")\\r\\n      coll \\"documents\\"]\\r\\n  (mc/insert db coll {\:first_name \\"John\\"  \:last_name \\"Lennon\\"})\\r\\n  (mc/insert db coll {\:first_name \\"Ringo\\" \:last_name \\"Starr\\"})\\r\\n\\r\\n  (mc/find db coll {\:first_name \\"Ringo\\"}))" ";; Switching to mashup-dsl.normalizer namespace" "(let [start (direct data-url)\\r\\n       end   (mock \\"normalized\\")\\t\\t\\t\\r\\n    xml-processing \\r\\n\\t\\t\\t\\t  (route (from start)\\r\\n            ( process \#(msh-contents))\\r\\n            (to end))\\r\\n\\tcamel (create \\r\\n             xml-processing\\r\\n                 )]\\r\\n    (start-test camel start end)\\r\\n     (stop-test camel))" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(normalizer-pattern)" "(deftest content-enricher-pattern\\r\\n  (let [ \\r\\n \\r\\n mashed (mock \\"mash\\")\\r\\n\\r\\n  camel (create (route (from data-url)\\r\\n                       (process (map-tags-contents data-url \:events));kako sad ovo kad sam ja napravila da mi\\r\\n                       ;funkcija ide iz urla\\r\\n                       (to mashed)))]\\r\\n    (start-test camel start mashed)\\r\\n     (is-message-count mashed 1)\\r\\n    (stop-test camel)\\r\\n    ))" "(content-enricher-pattern)" "(deftest content-enricher-pattern\\r\\n  (let [ \\r\\n \\r\\n mashed (mock \\"mash\\")\\r\\n\\r\\n  camel (create (route (from data-url)\\r\\n                       (process (map-tags-contents data-url \:events));kako sad ovo kad sam ja napravila da mi\\r\\n                       ;funkcija ide iz urla\\r\\n                       (to mashed)))]\\r\\n    (start-test camel  mashed)\\r\\n     (is-message-count mashed 1)\\r\\n    (stop-test camel)\\r\\n    ))" "(content-enricher-pattern)" "(aggregator-pattern)" "(deftest aggregator-pattern\\r\\n \\r\\n (let [\\r\\n\\tend  (mock \\"end\\")\\r\\n\\tf (fn []\\r\\n\\t (msh-contents  \\"name\\" \\"events\\" \\"title\\" \\"date\\"))\\r\\n\\r\\n\\tr (route (from data-url)\\r\\n\\t (aggregator f \\"type\\" \:count 1)\\r\\n\\t(to end))\\r\\n\\tcamel (create r)]\\r\\n   (start-test camel  end)\\r\\n     \\r\\n   (let [messages (get-received-messages end)]\\r\\n (is (\= (count messages) 1))\\r\\n      )\\r\\n    (stop-test camel)))" "(aggregator-pattern)" ";; Switching to mashup-dsl.datamodel namespace" "(msh-contents2)" ";; Switching to mashup-dsl.templating namespace" "(mshp (msh-contents2))" "(map \#(value-cell %) (for[e (\:data-content (msh-contents2))] (vals e)))" "(str something)" "(str 1)" "(keyword k )" "(msh-contents data-url \\"Events mashup\\" \:events \:title \:url)" "($x\:text(create-xpath \\"events\\"))" "($x\:text(create-xpath \:events))" "(msh-contents data-url \\"Events mashup\\" \\"events\\" \:title \:url)" "(create-xpath [\\"search\\" \\"events\\" \\"event\\"])" "(apply str (interpose \\\\/ [\\"search\\" \\"events\\" \\"event\\"]))" "(str \\"/\\"(apply str (interpose \\\\/ [\\"search\\" \\"events\\" \\"event\\"])))" "(create-xpath \\"title\\")" "(defn create-root-tag [tags] \\r\\n  (str \\"/\\"(apply str (interpose \\\\/ tags))))" "(create-root-tag [\\"search\\" \\"events\\" \\"event\\"])" "(msh-contents data-url \\"events\\" [\\"search\\" \\"events\\" \\"event\\"] \\"title\\" \\"url\\")" "(msh-contents data-url \\"events\\" [\\"search\\" \\"events\\" \\"event\\"] [\\"title\\" \\"url\\"])" ";; Switching to mashup-dsl.datamodel namespace" "(msh-contents data-url \\"events\\" (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) [\\"title\\" \\"url\\"])" "(defn msh-contents-try [url mshpname root-tag tags]\\r\\n        (zipmap tags \\r\\n                [(vec (map ( fn[item] \\r\\n                            ( map (fn[tag]\\r\\n                              ({(keyword tag) ($x\:text(create-xpath tag) )item}))tags)\\r\\n                           (take 5\\r\\n                                  ($x root-tag (xmldoc url)))))) mshpname]))" "(msh-contents-try data-url \\"events\\" (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) [\\"title\\" \\"url\\"])" "(zipmap [\\"title\\" \\"url\\"]\\r\\n          [(vec (map (fn[item] \\r\\n                       (map \#({(keyword %) ($x\:text(create-xpath %)item)})[\\"title\\" \\"url\\"])))\\r\\n                (take 5\\r\\n                                  ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc url)))\\"events\\")])" "(zipmap [\\"title\\" \\"url\\"]\\r\\n             [(vec (map (fn[item] \\r\\n                          (map \#({(keyword %) ($x\:text(create-xpath %)item)})[\\"title\\" \\"url\\"])))\\r\\n                   (take 5\\r\\n                                     ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc data-url)))\\"events\\")])" "(zipmap [\\"title\\" \\"url\\"]\\r\\n                [(vec (map (fn[item] \\r\\n                             (map \#({(keyword %) ($x\:text(create-xpath %)item)})[\\"title\\" \\"url\\"]))\\r\\n                      (take 5\\r\\n                                        ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc data-url))))\\"events\\")])" "(zipmap [\:title \:url]\\r\\n                   [(vec (map (fn[item] \\r\\n                                (map \#({(keyword %) ($x\:text(create-xpath %)item)})[\:title \:url]))\\r\\n                         (take 5\\r\\n                                           ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc data-url))))\\"events\\")])" ";; Switching to mashup-dsl.datamodel namespace" "(msh-contents-try data-url \\"events\\" [\:search \:events \:event] [\:title \:url])" "(msh-contents-try data-url \\"events\\" [\\"search\\" \\"events\\" \\"event\\"] [\:title \:url])" "(create-root-tag [\\"search\\" \\"events\\" \\"event\\"])" "(msh-contents-try data-url \\"events\\" (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) [\:title \:url])" "(take 5 ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc data-url)))" "(take 5 ($x \\"/search/events/event\\" (xmldoc data-url)))" "(xmldoc data-url)" "(msh-contents-try data-url \\"events\\" (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) [\:title \:url])" "(let [events-xml (memoize (fn [] (slurp data-url)))\\r\\n        xmldoc (memoize (fn [] (xml->doc (events-xml data-url))))\\r\\n        items (take 5 ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc)))\\r\\n        f (fn[item] (map \#({(keyword %) ($x\:text(create-xpath %))}) [\:title \:url]))]\\r\\n    (zipmap tags [(vec (map f items)) \\"events\\"]))" "(let [events-xml (memoize (fn [] (slurp data-url)))\\r\\n           xmldoc (memoize (fn [] (xml->doc (events-xml))))\\r\\n           items (take 5 ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc)))\\r\\n           f (fn[item] (map \#({(keyword %) ($x\:text(create-xpath %))}) [\:title \:url]))]\\r\\n       (zipmap tags [(vec (map f items)) \\"events\\"]))" "(let [events-xml (memoize (fn [] (slurp data-url)))\\r\\n              xmldoc (memoize (fn [] (xml->doc (events-xml))))\\r\\n              items (take 5 ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc)))\\r\\n              f (fn[item] (map \#({(keyword %) ($x\:text(create-xpath %) item)}) [\:title \:url]))]\\r\\n          (zipmap tags [(vec (map f items)) \\"events\\"]))" "(msh-contents2)" "(msh-contents2 data-url)" "(map html/text\\r\\n     (html/select (html/html-snippet data-url)  [\:title \:url]))" "(map html/text\\r\\n        (html/select (html/html-snippet data-url)  [\:title \:url]))" "(map html/text\\r\\n           (html/select (html/html-snippet (html/xml-parser data-url))  [\:title \:url]))" " (html/xml-parser data-url)" "(xml/parse data-url)" ";; Switching to mashup-dsl.datamodel namespace" "(msh-contents-try data-url \\"events\\" (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) [\:title \:url])" "(let [events-xml (memoize (fn [] (slurp url)))\\r\\n        xmldoc (memoize (fn [] (xml->doc (events-xml ))))\\r\\n        items (take 5 ($x root-tag (xmldoc)))\\r\\n        f (fn[item] (map \#({(keyword %) ($x\:text (create-xpath %) item)}) tags))]\\r\\n    (vec (map f items)))" "(let [events-xml (memoize (fn [] (slurp data-url)))\\r\\n           xmldoc (memoize (fn [] (xml->doc (events-xml ))))\\r\\n           items (take 5 ($x root-tag (xmldoc)))\\r\\n           f (fn[item] (map \#({(keyword %) ($x\:text (create-xpath %) item)}) tags))]\\r\\n       (vec (map f items)))" "(let [events-xml (memoize (fn [] (slurp data-url)))\\r\\n           xmldoc (memoize (fn [] (xml->doc (events-xml ))))\\r\\n           items (take 5 ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc)))\\r\\n           f (fn[item] (map \#({(keyword %) ($x\:text (create-xpath %) item)}) tags))]\\r\\n       (vec (map f items)))" "(let [events-xml (memoize (fn [] (slurp data-url)))\\r\\n              xmldoc (memoize (fn [] (xml->doc (events-xml ))))\\r\\n              items (take 5 ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc)))\\r\\n              f (fn[item] (map \#({(keyword %) ($x\:text (create-xpath %) item)}) tags))]\\r\\n          (map f items))" "(let [events-xml (memoize (fn [] (slurp data-url)))\\r\\n                 xmldoc (memoize (fn [] (xml->doc (events-xml ))))\\r\\n                 items (take 5 ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc)))\\r\\n                 f (fn[item] (map \#({(keyword %) ($x\:text (create-xpath %) item)}) tags))]\\r\\n             ( f))" " (let [events-xml (memoize (fn [] (slurp data-url)))\\r\\n                    xmldoc (memoize (fn [] (xml->doc (events-xml ))))\\r\\n                    items (take 5 ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc)))\\r\\n                    f (fn[item] (map \#({(keyword %) ($x\:text (create-xpath %) item)}) tags))]\\r\\n                ( f items))" "(let [events-xml (memoize (fn [] (slurp data-url)))\\r\\n                       xmldoc (memoize (fn [] (xml->doc (events-xml ))))\\r\\n                       items (take 5 ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc)))\\n                       tags [\:title \:url]\\r\\n                       f (fn[item] (map \#({(keyword %) ($x\:text (create-xpath %) item)}) tags))]\\r\\n                   ( f items))" ";; Switching to mashup-dsl.datamodel namespace" "(let [events-xml (memoize (fn [] (slurp data-url)))\\r\\n                          xmldoc (memoize (fn [] (xml->doc (events-xml ))))\\r\\n                          items (take 5 ($x (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) (xmldoc)))\\r\\n                          tags [\:title \:url]\\r\\n                          f (fn[item] (map \#({(keyword %) ($x\:text (create-xpath %) item)}) tags))]\\r\\n                      ( f items))" "(msh-contents-try data-url \\"events\\" (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) [\:title \:url])" "(all-paths (xmldoc))" "(all-paths (memoize (fn [] (xml->doc (events-xml data-url)))))" "(msh-contents2 data-url)" "(msh-contents2)" "(mm)" "(msh-contents2)" "(msh-contents-try)" "(msh-contents-try data-url \\"events\\" (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) [\:title \:url])" "((render (emit*(html/content (map \#(value-cell %) (for[e (\:event-data dummy-content)] (vals e)))))\\n         ))" "((html/render (html/emit*(html/content (map \#(value-cell %) (for[e (\:event-data dummy-content)] (vals e)))))))" "(html/emit*(html/content (map \#(value-cell %) (for[e (\:event-data dummy-content)] (vals e)))))" "(html/defsnippet value-cell (template-div) [\:div.Row \:div.Cell] [value]\\r\\n              (html/content value))" ";; Switching to mashup-dsl.templating namespace" "(map \#(+ 1 %) (for [e [{\:a 1 \:b 2} {\:a 3 \:b 4}]] (vals e)))" "(+ 1 3)" "(for [e [{\:a 1 \:b 2} {\:a 3 \:b 4}]] (vals e))" "(map \#(+1 %) ((1 2) (3 4)))" "(map \#(apply +1 %) ((1 2) (3 4)))" "(let [v [{\:key1 \\"value1\\", \:key2 \\"value2\\"} {\:key1 \\"value3\\", \:key2 \\"value4\\"} {\:key2 \\"value5\\"}]]\\r\\n  (vec (keep \:key1 v)))" "(map \#(value-cell %) (for[e (\:mashup-content cont)] (vals e)))" "(map \#(value-cell %) (for[e (\:mashup-content dummy-content)] (vals e)))" "(map \#(value-cell %) (for[e (\:event-data dummy-content)] (vals e)))" "(\:event-data dummy-content)" "(def vector-of-maps (\:event-data dummy-content))" " (def vector-of-maps [{\:a 1 \:b 2} {\:a 3 \:b 4}])" " (map \#(+1 %) vector-of-maps)" "(defn map-kv\\r\\n  \\"Given a map and a function of two arguments, returns the map\\r\\n  resulting from applying the function to each of its entries. The\\r\\n  provided function must return a pair (a two-element sequence.)\\"\\r\\n  [m f]\\r\\n  (into {} (map (fn [[k v]] (f k v)) m)))\\r\\n\\r\\n(map-kv {\\"a\\" 1 \\"b\\" 1} (fn [k v] [(keyword k) (inc v)]))" "(defn mapv-map-values [f vm]\\r\\n  (letfn [(map-kv [m] (zipmap (keys m) (map f (vals m))))]\\r\\n    (mapv map-values vm)))" "(defn mapv-map-values [f vm]\\r\\n     (letfn [(map-kv [m] (zipmap (keys m) (map f (vals m))))]\\r\\n       (mapv map-kv vm)))" "(mapv-map-values inc [{\:a 1 \:b 2} {\:a 3 \:b 4}])" "(mapv (map-kv [{\:a 1 \:b 2} {\:a 3 \:b 4}] inc))" "(defn mapv-map-values [f vm]\\r\\n     (letfn [(map-kv [m] (into {} (map (fn [[k v]] (f k v)) m)))]\\r\\n       (mapv map-values vm)))" "(defn mapv-map-values [f vm]\\r\\n        (letfn [(map-kv [m] (into {} (map (fn [[k v]] (f k v)) m)))]\\r\\n          (mapv map-kv vm)))" "(mapv-map-values inc [{\:a 1 \:b 2} {\:a 3 \:b 4}])" "(mapv-map-values 'inc [{\:a 1 \:b 2} {\:a 3 \:b 4}])" "(defn dodo [m] (map (fn [map] (apply merge (for [[k v] map] (assoc {} k (inc v))))) m))" "(dodo [{\:a 1 \:b 2} {\:a 3 \:b 4}])" "(map \#(update-map % value-cell) (\:mashup-content cont))" "(map \#(update-map % value-cell) (\:event-data dummy-content))" "(map \#(update-map % value-cell) (vals (\:event-data dummy-content)))" "(vals (\:event-data dummy-content))" "(update-map (\:event-data dummy-content) value-cell)" "(msh-contents2)" "(\:data-content msh-contents2)" "(map value-cell [{\:a \\"1\\" \:b \\"2\\"} {\:a \\"1\\" \:b \\"2\\"}])" "(mapv value-cell [{\:a \\"1\\" \:b \\"2\\"} {\:a \\"1\\" \:b \\"2\\"}])" "(defn update-map [m f] (reduce-kv (fn [m k v] (assoc m k (f v))) {} m))" "(def vector-of-maps [{\:a 1 \:b 2} {\:a 3 \:b 4}])" "(map \#(update-map % value-cell) vector-of-maps)" "(def vector-of-maps [{\:a \\"1\\" \:b \\"2\\"} {\:a \\"3\\" \:b \\"4\\"}])" "(map \#(update-map % value-cell) vector-of-maps)" "(vals (map \#(update-map % value-cell) vector-of-maps))" "(map (fn [map] (apply merge (for [[k v] map] (assoc {} k (value-cell v))))) vector-of-maps)" "(map (fn [map] (apply merge (for [[k v] map] (assoc {} (value-cell v))))) vector-of-maps)" "(into {} (for [[k v] vector-of-maps] [(keyword k) v]))" "(vals (vector-of-maps))" "(mapv (vals vector-of-maps))" "(mapv vals vector-of-maps)" "(mapv vals (map (fn [map] (apply merge (for [[k v] map] (assoc {} k (value-cell v))))) vector-of-maps))" ";; Switching to mashup-dsl.templating namespace" "(mapcat vals dummy-content)" "(mapv vals (\:event-data dummy-content))" "(value-cell (mapv vals (\:event-data dummy-content)))" "(-> value-cell (mapv vals (\:event-data dummy-content)))" "(mapv vals (\:event-data dummy-content))" "(apply value-cell (mapv vals (\:event-data dummy-content)))" "(html/sniptest (template-div) [\:div.Row \:div.Cell] html/clone-for [v (mapv vals (\:event-data dummy-content))]\\n                html/content v)" "(html/sniptest (template-div) [\:div.Row \:div.Cell] (html/clone-for [v (mapv vals (\:event-data dummy-content))]\\r\\n                   (html/content v)))" "(map (value-cell %) (mapv vals (\:event-data dummy-content)))" "(map \#(value-cell %) (mapv vals (\:event-data dummy-content)))" "(mapv vals (\:event-data dummy-content))" "(\:event-data dummy-content)" "(map value-cell (mapv vals (\:event-data dummy-content)))" "(html/defsnippet value-cell (template-div)\\r\\n  [\:div.Row \:div.Cell]\\r\\n  [values]\\r\\n  (html/clone-for [value values]\\r\\n                  (html/content value)))" "((map value-cell (mapv vals (\:event-data dummy-content))))" "(map value-cell (mapv vals (\:event-data dummy-content)))" "(map row-snipp (mapv vals (\:event-data dummy-content)))" "(row-snipp (mapv vals (\:event-data dummy-content)))" "(mapv vals (\:event-data dummy-content))" "(into {} (mapv vals (\:event-data dummy-content)))" "(map value-cell (mapv c (\:data-content cont)))" "(html/sniptest (template-div) [\:div.Row]\\n               (map value-cell (\:event-data dummy-content)))" " (html/sniptest (template-div) [\:div.Row \:div.Cell] \\n                (html/clone-for [value (\:event-data dummy-content)]\\r\\n                     (html/content value)))" "(map \#(update-map % value-cell) (\:event-data dummy-content))" "(html/defsnippet  value-row (template-div) \\n  [\:div.Row] [event-data] (html/clone-for [[k v] event-data] [\:div.Cell] (html/content v)))" "(value-row (mapv vals (\:event-data dummy-content)))" "(for [[k v] (\:event-data dummy-content)] (println v))" "(for [[k v] (\:event-data dummy-content)] [k v])" "(\:event-data dummy-content)" " (value-row (\:event-data dummy-content))" "(mapv vals (\:event-data dummy-content))" "(html/defsnippet  value-row2 (template-div) \\r\\n     [\:div.Row] [event-data] (html/clone-for [v event-data] [\:div.Cell] (html/content v)))" "(value-row (mapv vals (\:event-data dummy-content)))" "(value-row2 (mapv vals (\:event-data dummy-content)))" " (html/defsnippet  value-row3 (template-div) \\r\\n        [\:div.Row] [event-data] (html/clone-for [v event-data] [\:div.Cell]  (html/clone-for v)))" "(html/defsnippet  value-row3 (template-div) \\r\\n           [\:div.Row] [event-data] (html/clone-for [vs event-data] [\:div.Cell]  (html/clone-for [v vs] (html/content value))))" "(html/defsnippet  value-row3 (template-div) \\r\\n              [\:div.Row] [event-data] (html/clone-for [vs event-data] [\:div.Cell]\\n                                                      (html/clone-for [v vs] (html/content v))))" "(value-row3 (mapv vals (\:event-data dummy-content)))" "(mshp (msh-contents2))" "(print (apply str (mshp (\:event-data dummy-content))))" "(print (apply str (mshp dummy-content)))" "(print (apply str (mshp (msh-contents2))))" " (print (apply str (mshp dummy-content)))" " (print (apply str (mshp (msh-contents2))))" "(msh-contents-try \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=The+Sound+of+Music&api_key\=00c6b7abec24599649bfcecf19c08cf1\\"\\n                  \\"artist\\" \\"artists\\" \:name \:url)" "(msh-contents-try \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=The+Sound+of+Music&api_key\=00c6b7abec24599649bfcecf19c08cf1\\"\\r\\n                     \\"artist\\" \\"artists\\" [\:name \:url])" "(msh-contents-try data-url \\"/search/events/event\\" \\"events\\" [\:title \:url])" "(msh-contents-try data-url  (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) \\"events\\" [\:title \:url])" ";; Switching to mashup-dsl.datamodel namespace" "(msh-contents-try data-url (create-root-tag [\\"search\\" \\"events\\" \\"event\\"]) \\"events\\"  [\:title \:url])" ";; Switching to mashup-dsl.datamodel namespace" "\\n(msh-contents-try data-url \\"/search/events/event\\" \\"events\\" [\\"title\\" \\"url\\"])" "(msh-contents-try data-url \\"/search/events/event\\" \\"events\\" [\\"title\\" \\"url\\"])" ";; Switching to mashup-dsl.datamodel namespace" "(msh-contents-macro data-url \\"/search/events/event\\" \\"events\\" [\:title \:url])" "(macroexpand-1 (msh-contents-macro data-url \\"/search/events/event\\" \\"events\\" [\:title \:url]))" "(msh-contents-macro data-url \\"/search/events/event\\" \\"events\\" [\:title \:url])" " (msh-contents-macro data-url \\"/search/events/event\\" \\"events\\" [\:title \:url])" "(defn func [tags item] (zipmap tags (map \#($x\:text (str %)) item)))" "(func [\:title \:url] (take 5\\r\\n                               ($x \\"/search/events/event\\" (xmldoc2) )))" "(defmacro xpath-paths [tags item]\\r\\n  `(defn func [tags item] (zipmap tags (map \#($x\:text (str %)) item))))" "(xpath-paths [\:title \:url] (take 5\\r\\n                                  ($x \\"/search/events/event\\" (xmldoc2) )))" "(defmacro xpath-paths [tags item]\\r\\n     `(defn func [tagovi item] (zipmap tags (map \#($x\:text (str %)) item))))" "(xpath-paths [\:title \:url] (take 5\\r\\n                                     ($x \\"/search/events/event\\" (xmldoc2) )))" ";; Switching to mashup-dsl.datamodel namespace" "(msh-contents-try data-url \\"/search/events/event\\" \\"events\\" [\:title \:url])" "(defxmldoc data-url)" "(msh-contents-try data-url \\"/search/events/event\\" \\"events\\" [\:title \:url])" ";; Switching to mashup-dsl.datamodel namespace" "(msh-contents-try data-url \\"/search/events/event\\" \\"events\\" [\:url \:title])" "(func-contents [\\"url\\" \\"title\\"])" "(map (apply juxt (map tag-fn [\\"url\\" \\"title\\"])) (take 2 ($x (xmldoc2))))" " (map (apply juxt (map tag-fn [\\"url\\" \\"title\\"])) (take 2 ($x \\"//event\\" (xmldoc2))))" "(func-contents [\\"url\\" \\"title\\"])" "(func-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url)" "(map \#(zipmap  [\:url \:title] %) (func-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url))" "(map keyword [\\"tags\\" \\"uu\\"])" "(into [] (map keyword [\\"tags\\" \\"uu\\"]))" "(func-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url)" "(map \#(zipmap  (create-keys [\\"url\\" \\"title\\"]) %) (func-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url))" "(func-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url)" "(let[ks (create-keys [\\"url\\" \\"title\\"])]\\r\\n    map \#(zipmap (ks) %) (func-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url))" "( map \#(zipmap (create-keys [\\"url\\" \\"title\\"]) %) (func-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url))" " (map \#(zipmap  (create-keys [\\"name\\" \\"image\\"]) %) (func-contents [\\"name\\" \\"image\\"] \\"//artist\\" \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=The+Sound+of+Music&api_key\=00c6b7abec24599649bfcecf19c08cf1\\"))" "(map \#(zipmap  (create-keys [\\"name\\" \\"url\\"]) %) (func-contents [\\"name\\" \\"url\\"] \\"//artist\\" \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=The+Sound+of+Music&api_key\=00c6b7abec24599649bfcecf19c08cf1\\"))" "(def v1 (map \#(zipmap  (create-keys [\\"name\\" \\"url\\"]) %) (func-contents [\\"name\\" \\"url\\"] \\"//artist\\" \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=The+Sound+of+Music&api_key\=00c6b7abec24599649bfcecf19c08cf1\\")))" "(def v2 ( map \#(zipmap (create-keys [\\"url\\" \\"title\\"]) %) (func-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url)))" "(merge-data v1 v2 \:title \:name)" "(merge-data v1 v2 [\:title \:name])" "(merge-data v1 v2 [\\"title\\" \\"name\\"])" "(str \\"http\://api.eventful.com/rest/events/search?\\" \\"app_key\=4H4Vff4PdrTGp3vV&\\" \\"keywords\=music&location\=New+York&date\=Future\\")" "(filter (fn [entry] (> (\:title entry) (\:name (v2)))) (v1))" "(map (fn [x] (if (\= (\:name x) (\:title m)) (merge m x) (v2))) (v1))" "(map (fn [x] (if (\= (\:title x) (\:name (v2))) (merge (v2) x) x)) (v1))" "(def v [{\:key1 \\"value 1\\" \:key2 \\"value2\\"} {\:key1 \\"value 3\\" \:key2 \\"value4\\"}])" "(def m {\:key3 \\"value2\\" \:key4 \\"value5\\"})" "(map (fn [x] (if (\= (\:key2 x) (\:key3 m)) (merge m x) x)) v)" "(mapv (fn [x] (if (\= (\:key2 x) (\:key3 m)) (merge m x) x)) v)" "(v1)" "(defn v1[] (map \#(zipmap  (create-keys [\\"name\\" \\"url\\"]) %) (func-contents [\\"name\\" \\"url\\"] \\"//artist\\" \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=The+Sound+of+Music&api_key\=00c6b7abec24599649bfcecf19c08cf1\\")))" "(v1)" "(map \#(zipmap  (create-keys [\\"name\\" \\"url\\"]) %) (func-contents [\\"name\\" \\"url\\"] \\"//artist\\" \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=The+Sound+of+Music&api_key\=00c6b7abec24599649bfcecf19c08cf1\\"))" "(v1)" "(v2)" "(defn v2 []( map \#(zipmap (create-keys [\\"url\\" \\"title\\"]) %) (func-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url)))" "(enrich-map-with-data (v2) (v1) \:title \:name)" "(v2)" "(into [] (v2))" "(enrich-map-with-data (into [] (v2)) (v1) \:title \:name)" "(into [] (v2))" "(parsing data-url)" "(zipp data-url)" "(zipp (parse data-url))" "(zipp (parsing data-url))" "(get-tag \:title data-url)" "(map-tags-contents data-url \:events \:event \:title)" "(get-content-from-tags data-url \:events \:event \:title)" ";; Switching to mashup-dsl.templating namespace" "(create-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url)" "(aggregator-pattern)" "(deftest aggregator-pattern\\r\\n  (let [end  (mock \\"end\\")\\r\\n\\t      f (fn []\\r\\n\\t       (mshp (create-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url)));here, the mshp fn should be called, and the its output to be called by render-response\\r\\n\\t      r (route (from data-url)\\r\\n\\t       (aggregator f \\"type\\" \:count 1)\\r\\n\\t       (to end))\\r\\n\\t      camel (create r)]\\r\\n   (start-test camel  end)\\r\\n   (let [messages (get-received-messages end)]\\r\\n   (is (\= (count messages) 1)))\\r\\n   (stop-test camel)))" "(ns mashup-dsl.aggregation\\r\\n  (\:use [clojure.test]\\r\\n        [mashup-dsl.camel-dsl]\\r\\n        [mashup-dsl.datamodel]\\r\\n        [mashup-dsl.templating]\\r\\n      \\t[mashup-dsl.test-utils]))" "(deftest aggregator-pattern\\r\\n  (let [end  (mock \\"end\\")\\r\\n\\t      f (fn []\\r\\n\\t       (mshp (create-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url)));here, the mshp fn should be called, and the its output to be called by render-response\\r\\n\\t      r (route (from data-url)\\r\\n\\t       (aggregator f \\"type\\" \:count 1)\\r\\n\\t       (to end))\\r\\n\\t      camel (create r)]\\r\\n   (start-test camel  end)\\r\\n   (let [messages (get-received-messages end)]\\r\\n   (is (\= (count messages) 1)))\\r\\n   (stop-test camel)))" "(aggregator-pattern)" "(defn contents-for-mashup [func mshpname]\\r\\n   (zipmap [\:data-content \:title] [(func) mshpname]))" "(contents-for-mashup (create-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url) \\"events mashup\\")" "(zipmap [\:data-content \:title] [(create-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url) \\"events mashup\\"])" " (zipmap [\:data-content \:title] [(create-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url) \\"events mashup\\"])" "(msh-contents2)" "(contents-for-mashup [(create-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url) \\"events mashup\\"])" "(contents-for-mashup (create-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url) \\"events mashup\\")" "(create-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url)" ";; Switching to mashup-dsl.aggregation namespace" "(aggregator-pattern)" "(normalizer-pattern)" "\\r\\n(deftest normalizer-pattern\\r\\n    (let [end (mock \\"normalized\\")\\t\\t\\t\\r\\n         \\r\\n          route ((from data-url)\\r\\n          (process \#((create-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url)))\\r\\n          (to end))\\r\\n\\t        camel (create route)]\\r\\n    (start-test camel  end)\\r\\n    (is-message-count end 1)\\r\\n    (stop-test camel)))" "(normalizer-pattern)" ";; Switching to mashup-dsl.test-utils namespace" "(normalizer-pattern)" "\\r\\n(deftest normalizer-pattern\\r\\n    (let [end (mock \\"normalized\\")\\t\\t\\t\\r\\n         \\r\\n          route ((from data-url)\\r\\n          (process \#((create-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url)))\\r\\n          (to end))\\r\\n\\t        camel (create route)]\\r\\n    (start-test camel  end)\\r\\n    (is-message-count end 1)\\r\\n    (stop-test camel)))" "(ns mashup-dsl.normalizer\\r\\n\\r\\n  (\:use [clojure.test]\\r\\n        [info.kovanovic.camelclojure.dsl]\\r\\n        [net.cgrand.enlive-html \:as en-html]\\r\\n        [mashup-dsl.datamodel]\\r\\n       \\r\\n\\t      [mashup-dsl.test-utils])\\r\\n )" "(defn- init [context endpoints]\\r\\n  (if-not (empty? endpoints)\\r\\n    (do (.setCamelContext (first endpoints) context)\\r\\n    (recur context (rest endpoints)))))\\r\\n\\r\\n\\r\\n\\r\\n(deftest normalizer-pattern\\r\\n    (let [end (mock \\"normalized\\")\\t\\t\\t\\r\\n         \\r\\n          route ((from data-url)\\r\\n          (process \#((create-contents [\\"url\\" \\"title\\"] \\"//event\\" data-url)))\\r\\n          (to end))\\r\\n\\t        camel (create route)]\\r\\n    (start-test camel  end)\\r\\n    (is-message-count end 1)\\r\\n    (stop-test camel)))" "(normalizer-pattern)" ";; Switching to mashup-dsl.normalizer namespace" "(normalizer-pattern)"]
eclipse.preferences.version=1
